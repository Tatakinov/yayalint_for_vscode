/* AutoGenerated Code, changes may be overwritten
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    EOF = "EOF",
    NL = "NL",
    Ascii = "Ascii",
    MBHead = "MBHead",
    MBData = "MBData",
    MB = "MB",
    Char = "Char",
    Char_$0_1 = "Char_$0_1",
    Char_$0_2 = "Char_$0_2",
    NumberZ = "NumberZ",
    NumberF = "NumberF",
    NumberR = "NumberR",
    NumberX = "NumberX",
    NumberRX_1 = "NumberRX_1",
    NumberRX_2 = "NumberRX_2",
    Space_1 = "Space_1",
    Space_2 = "Space_2",
    Space_3 = "Space_3",
    LineComment = "LineComment",
    LineComment_$0 = "LineComment_$0",
    BlockComment = "BlockComment",
    BlockComment_$0 = "BlockComment_$0",
    Sep_1 = "Sep_1",
    Sep_2 = "Sep_2",
    Sep2 = "Sep2",
    Empty_1 = "Empty_1",
    Empty_2 = "Empty_2",
    Empty_$0 = "Empty_$0",
    SepEx_1 = "SepEx_1",
    SepEx_2 = "SepEx_2",
    Reserve_1 = "Reserve_1",
    Reserve_2 = "Reserve_2",
    Reserve_3 = "Reserve_3",
    Reserve_4 = "Reserve_4",
    Reserve_5 = "Reserve_5",
    Reserve_6 = "Reserve_6",
    Reserve_7 = "Reserve_7",
    Reserve_8 = "Reserve_8",
    Reserve_9 = "Reserve_9",
    Reserve_10 = "Reserve_10",
    Reserve_11 = "Reserve_11",
    Reserve_12 = "Reserve_12",
    InvalidName = "InvalidName",
    InvalidNameHead_1 = "InvalidNameHead_1",
    InvalidNameHead_2 = "InvalidNameHead_2",
    ValidNameChar = "ValidNameChar",
    NameStartNumber = "NameStartNumber",
    NameStartChar = "NameStartChar",
    NameStartChar_$0_1 = "NameStartChar_$0_1",
    NameStartChar_$0_2 = "NameStartChar_$0_2",
    NameStartChar_$0_$0 = "NameStartChar_$0_$0",
    NameStartChar_$0_$0_$0_1 = "NameStartChar_$0_$0_$0_1",
    NameStartChar_$0_$0_$0_2 = "NameStartChar_$0_$0_$0_2",
    NameStartChar_$0_$0_$0_3 = "NameStartChar_$0_$0_$0_3",
    Name_1 = "Name_1",
    Name_2 = "Name_2",
    Number = "Number",
    LocalVariable = "LocalVariable",
    GlobalVariable = "GlobalVariable",
    Variable_1 = "Variable_1",
    Variable_2 = "Variable_2",
    Return = "Return",
    Break = "Break",
    Continue = "Continue",
    StringSepDouble = "StringSepDouble",
    StringSepSingle = "StringSepSingle",
    StringNL = "StringNL",
    CharInStringSingle = "CharInStringSingle",
    CharNLInStringSingleSingle_1 = "CharNLInStringSingleSingle_1",
    CharNLInStringSingleSingle_2 = "CharNLInStringSingleSingle_2",
    CharNLInStringMultiSingle_1 = "CharNLInStringMultiSingle_1",
    CharNLInStringMultiSingle_2 = "CharNLInStringMultiSingle_2",
    StringSingleSingle = "StringSingleSingle",
    StringMultiSingle = "StringMultiSingle",
    String_Single_1 = "String_Single_1",
    String_Single_2 = "String_Single_2",
    ExpSep = "ExpSep",
    ExpOpComma = "ExpOpComma",
    ExpOpOtherSet_1 = "ExpOpOtherSet_1",
    ExpOpOtherSet_2 = "ExpOpOtherSet_2",
    ExpOpOtherSet_3 = "ExpOpOtherSet_3",
    ExpOpOtherSet_4 = "ExpOpOtherSet_4",
    ExpOpOtherSet_5 = "ExpOpOtherSet_5",
    ExpOpOtherSet_6 = "ExpOpOtherSet_6",
    ExpOpOtherSet_7 = "ExpOpOtherSet_7",
    ExpOpOtherSet_8 = "ExpOpOtherSet_8",
    ExpOpOtherSet_9 = "ExpOpOtherSet_9",
    ExpOpOtherSet_10 = "ExpOpOtherSet_10",
    ExpOpOtherSet_11 = "ExpOpOtherSet_11",
    ExpOpSet_1 = "ExpOpSet_1",
    ExpOpSet_2 = "ExpOpSet_2",
    ExpOpOR = "ExpOpOR",
    ExpOpAND = "ExpOpAND",
    ExpOpCompare_1 = "ExpOpCompare_1",
    ExpOpCompare_2 = "ExpOpCompare_2",
    ExpOpCompare_3 = "ExpOpCompare_3",
    ExpOpCompare_4 = "ExpOpCompare_4",
    ExpOpCompare_5 = "ExpOpCompare_5",
    ExpOpCompare_6 = "ExpOpCompare_6",
    ExpOpCompare_7 = "ExpOpCompare_7",
    ExpOpCompare_8 = "ExpOpCompare_8",
    ExpOp7 = "ExpOp7",
    ExpOp8 = "ExpOp8",
    ExpOp9 = "ExpOp9",
    ExpOp10_1 = "ExpOp10_1",
    ExpOp10_2 = "ExpOp10_2",
    ExpOpNOT = "ExpOpNOT",
    ExpS1Sub = "ExpS1Sub",
    ExpS1 = "ExpS1",
    ExpS2Sub = "ExpS2Sub",
    ExpS2 = "ExpS2",
    ExpS3Sub = "ExpS3Sub",
    ExpS3 = "ExpS3",
    ExpS4Sub = "ExpS4Sub",
    ExpS4 = "ExpS4",
    ExpS5Sub = "ExpS5Sub",
    ExpS5 = "ExpS5",
    ExpS6Sub = "ExpS6Sub",
    ExpS6 = "ExpS6",
    ExpS7 = "ExpS7",
    ExpS8Sub = "ExpS8Sub",
    ExpS8 = "ExpS8",
    ExpS9Sub = "ExpS9Sub",
    ExpS9 = "ExpS9",
    ExpS10Sub = "ExpS10Sub",
    ExpS10 = "ExpS10",
    ExpS11 = "ExpS11",
    BracketIndexS = "BracketIndexS",
    BracketCallS = "BracketCallS",
    WithBracketS_1 = "WithBracketS_1",
    WithBracketS_2 = "WithBracketS_2",
    String_Single_Bracket = "String_Single_Bracket",
    LocalVariableWithBracketS = "LocalVariableWithBracketS",
    GlobalVariableWithBracketS = "GlobalVariableWithBracketS",
    BracketExpS = "BracketExpS",
    ExpS12_1 = "ExpS12_1",
    ExpS12_2 = "ExpS12_2",
    ExpS12_3 = "ExpS12_3",
    ExpS12_4 = "ExpS12_4",
    ExpS12_5 = "ExpS12_5",
    ExpInStringSub = "ExpInStringSub",
    ExpInString = "ExpInString",
    CharInString = "CharInString",
    CharInString_$0_1 = "CharInString_$0_1",
    CharInString_$0_2 = "CharInString_$0_2",
    StringDoubleSub_1 = "StringDoubleSub_1",
    StringDoubleSub_2 = "StringDoubleSub_2",
    StringDoubleSub_3 = "StringDoubleSub_3",
    StringSingleDouble = "StringSingleDouble",
    StringSingle_1 = "StringSingle_1",
    StringSingle_2 = "StringSingle_2",
    Expression = "Expression",
    Exp1Sub = "Exp1Sub",
    Exp1 = "Exp1",
    Exp2Sub = "Exp2Sub",
    Exp2 = "Exp2",
    Exp3Sub = "Exp3Sub",
    Exp3 = "Exp3",
    Exp4Sub = "Exp4Sub",
    Exp4 = "Exp4",
    Exp5Sub = "Exp5Sub",
    Exp5 = "Exp5",
    Exp6Sub = "Exp6Sub",
    Exp6 = "Exp6",
    Exp7 = "Exp7",
    Exp8Sub = "Exp8Sub",
    Exp8 = "Exp8",
    Exp9Sub = "Exp9Sub",
    Exp9 = "Exp9",
    Exp10Sub = "Exp10Sub",
    Exp10 = "Exp10",
    Exp11 = "Exp11",
    BracketIndex = "BracketIndex",
    BracketCall = "BracketCall",
    WithBracket_1 = "WithBracket_1",
    WithBracket_2 = "WithBracket_2",
    BracketExp = "BracketExp",
    LocalVariableWithBracket = "LocalVariableWithBracket",
    GlobalVariableWithBracket = "GlobalVariableWithBracket",
    Exp12_1 = "Exp12_1",
    Exp12_2 = "Exp12_2",
    Exp12_3 = "Exp12_3",
    Exp12_4 = "Exp12_4",
    Exp12_5 = "Exp12_5",
    StringV_1 = "StringV_1",
    StringV_2 = "StringV_2",
    String = "String",
    StringMulti_1 = "StringMulti_1",
    StringMulti_2 = "StringMulti_2",
    ExpInStr = "ExpInStr",
    StringMultiDouble = "StringMultiDouble",
    AlternativeSub_1 = "AlternativeSub_1",
    AlternativeSub_2 = "AlternativeSub_2",
    AlternativeSub_3 = "AlternativeSub_3",
    AlternativeSub_4 = "AlternativeSub_4",
    AlternativeParallel_1 = "AlternativeParallel_1",
    AlternativeParallel_2 = "AlternativeParallel_2",
    Alternative_1 = "Alternative_1",
    Alternative_2 = "Alternative_2",
    Alternative_3 = "Alternative_3",
    Alternative_4 = "Alternative_4",
    Alternative_5 = "Alternative_5",
    Alternative_6 = "Alternative_6",
    Alternative_7 = "Alternative_7",
    Alternative_$0 = "Alternative_$0",
    Alternative_$1 = "Alternative_$1",
    AlternativeSep = "AlternativeSep",
    ForConditionSep = "ForConditionSep",
    ForCondition = "ForCondition",
    ForCondition_$0 = "ForCondition_$0",
    ForCondition_$1 = "ForCondition_$1",
    ForeachCondition = "ForeachCondition",
    ForeachCondition_$0 = "ForeachCondition_$0",
    Label_1 = "Label_1",
    Label_2 = "Label_2",
    WhenConditionSub = "WhenConditionSub",
    WhenConditionSub_$0_1 = "WhenConditionSub_$0_1",
    WhenConditionSub_$0_2 = "WhenConditionSub_$0_2",
    WhenCondition = "WhenCondition",
    OneLineExpression = "OneLineExpression",
    ScopeBegin = "ScopeBegin",
    ScopeEnd = "ScopeEnd",
    ExpressionInBracket = "ExpressionInBracket",
    Condition_1 = "Condition_1",
    Condition_2 = "Condition_2",
    ScopeInClauseSub = "ScopeInClauseSub",
    ScopeInClauseSub_$0_1 = "ScopeInClauseSub_$0_1",
    ScopeInClauseSub_$0_2 = "ScopeInClauseSub_$0_2",
    ScopeInClause_1 = "ScopeInClause_1",
    ScopeInClause_2 = "ScopeInClause_2",
    Scope1Sub = "Scope1Sub",
    Scope1 = "Scope1",
    Scope2 = "Scope2",
    ScopeInnerSub_1 = "ScopeInnerSub_1",
    ScopeInnerSub_2 = "ScopeInnerSub_2",
    ScopeInnerSub_3 = "ScopeInnerSub_3",
    ScopeInnerSub_4 = "ScopeInnerSub_4",
    ScopeInnerSub_5 = "ScopeInnerSub_5",
    ScopeInnerSub_6 = "ScopeInnerSub_6",
    ScopeInnerSub_7 = "ScopeInnerSub_7",
    ScopeInnerSub_8 = "ScopeInnerSub_8",
    ScopeInnerSub_9 = "ScopeInnerSub_9",
    ScopeInnerSub_10 = "ScopeInnerSub_10",
    ScopeInnerSub_11 = "ScopeInnerSub_11",
    ScopeInner = "ScopeInner",
    ScopeInner_$0_1 = "ScopeInner_$0_1",
    ScopeInner_$0_2 = "ScopeInner_$0_2",
    ScopeInner_$1_1 = "ScopeInner_$1_1",
    ScopeInner_$1_2 = "ScopeInner_$1_2",
    ScopeParallel = "ScopeParallel",
    ScopeParallel_$0_1 = "ScopeParallel_$0_1",
    ScopeParallel_$0_2 = "ScopeParallel_$0_2",
    ScopeIfSubElseIf = "ScopeIfSubElseIf",
    ScopeIfSubElseIf_$0_1 = "ScopeIfSubElseIf_$0_1",
    ScopeIfSubElseIf_$0_2 = "ScopeIfSubElseIf_$0_2",
    ScopeIfSubElse = "ScopeIfSubElse",
    ScopeIfSubElse_$0_1 = "ScopeIfSubElse_$0_1",
    ScopeIfSubElse_$0_2 = "ScopeIfSubElse_$0_2",
    ScopeIf = "ScopeIf",
    ScopeIfSubIf = "ScopeIfSubIf",
    ScopeIfIf = "ScopeIfIf",
    ScopeIfElseIf = "ScopeIfElseIf",
    ScopeIfElse = "ScopeIfElse",
    ScopeWhile = "ScopeWhile",
    ScopeForSub_1 = "ScopeForSub_1",
    ScopeForSub_2 = "ScopeForSub_2",
    ScopeFor = "ScopeFor",
    ScopeForeachSub_1 = "ScopeForeachSub_1",
    ScopeForeachSub_2 = "ScopeForeachSub_2",
    ScopeForeach = "ScopeForeach",
    ScopeCase = "ScopeCase",
    ScopeCaseCase = "ScopeCaseCase",
    ScopeCaseWhenSub_1 = "ScopeCaseWhenSub_1",
    ScopeCaseWhenSub_2 = "ScopeCaseWhenSub_2",
    ScopeCaseWhen = "ScopeCaseWhen",
    ScopeCaseOthers = "ScopeCaseOthers",
    ScopeSwitch = "ScopeSwitch",
    Scope = "Scope",
    ScopeOuter = "ScopeOuter",
    FunctionName = "FunctionName",
    FunctionAlternative = "FunctionAlternative",
    Function = "Function",
    GrammarSub_1 = "GrammarSub_1",
    GrammarSub_2 = "GrammarSub_2",
    Grammar = "Grammar",
    $EOF = "$EOF",
}
export type start = Grammar;
export type EOF = {kind: ASTKinds.$EOF};
export interface NL {
    kind: ASTKinds.NL;
    ch: string;
}
export type Ascii = string;
export type MBHead = string;
export type MBData = string;
export type MB = string;
export interface Char {
    kind: ASTKinds.Char;
    ch: Char_$0;
}
export type Char_$0 = Char_$0_1 | Char_$0_2;
export type Char_$0_1 = Ascii;
export type Char_$0_2 = MB;
export interface NumberZ {
    kind: ASTKinds.NumberZ;
    sign: Nullable<string>;
    num: string;
}
export interface NumberF {
    kind: ASTKinds.NumberF;
    v: string[];
}
export interface NumberR {
    kind: ASTKinds.NumberR;
    num: NumberZ;
    float: Nullable<NumberF>;
}
export interface NumberX {
    kind: ASTKinds.NumberX;
    sign: Nullable<string>;
    v: string[];
}
export type NumberRX = NumberRX_1 | NumberRX_2;
export interface NumberRX_1 {
    kind: ASTKinds.NumberRX_1;
    num: NumberX;
}
export interface NumberRX_2 {
    kind: ASTKinds.NumberRX_2;
    num: NumberR;
}
export type Space = Space_1 | Space_2 | Space_3;
export type Space_1 = string;
export type Space_2 = string;
export type Space_3 = BlockComment;
export interface LineComment {
    kind: ASTKinds.LineComment;
    pos: PosInfo;
    comment: LineComment_$0;
}
export type LineComment_$0 = Char[];
export interface BlockComment {
    kind: ASTKinds.BlockComment;
}
export interface BlockComment_$0 {
    kind: ASTKinds.BlockComment_$0;
}
export type Sep = Sep_1 | Sep_2;
export type Sep_1 = NL;
export type Sep_2 = LineComment;
export type Sep2 = string;
export type Empty = Empty_1 | Empty_2;
export type Empty_1 = Empty_$0;
export interface Empty_2 {
    kind: ASTKinds.Empty_2;
    comment: LineComment;
}
export interface Empty_$0 {
    kind: ASTKinds.Empty_$0;
}
export type SepEx = SepEx_1 | SepEx_2;
export type SepEx_1 = NL;
export type SepEx_2 = Space;
export type Reserve = Reserve_1 | Reserve_2 | Reserve_3 | Reserve_4 | Reserve_5 | Reserve_6 | Reserve_7 | Reserve_8 | Reserve_9 | Reserve_10 | Reserve_11 | Reserve_12;
export type Reserve_1 = string;
export type Reserve_2 = string;
export type Reserve_3 = string;
export type Reserve_4 = string;
export type Reserve_5 = string;
export type Reserve_6 = string;
export type Reserve_7 = string;
export interface Reserve_8 {
    kind: ASTKinds.Reserve_8;
}
export type Reserve_9 = string;
export type Reserve_10 = string;
export type Reserve_11 = string;
export type Reserve_12 = string;
export type InvalidName = string;
export type InvalidNameHead = InvalidNameHead_1 | InvalidNameHead_2;
export type InvalidNameHead_1 = string;
export type InvalidNameHead_2 = InvalidName;
export interface ValidNameChar {
    kind: ASTKinds.ValidNameChar;
    ch: Char;
}
export interface NameStartNumber {
    kind: ASTKinds.NameStartNumber;
    num: string[];
    name: ValidNameChar[];
}
export interface NameStartChar {
    kind: ASTKinds.NameStartChar;
    name: ValidNameChar[];
}
export type NameStartChar_$0 = NameStartChar_$0_1 | NameStartChar_$0_2;
export type NameStartChar_$0_1 = InvalidNameHead;
export type NameStartChar_$0_2 = NameStartChar_$0_$0;
export interface NameStartChar_$0_$0 {
    kind: ASTKinds.NameStartChar_$0_$0;
}
export type NameStartChar_$0_$0_$0 = NameStartChar_$0_$0_$0_1 | NameStartChar_$0_$0_$0_2 | NameStartChar_$0_$0_$0_3;
export type NameStartChar_$0_$0_$0_1 = EOF;
export type NameStartChar_$0_$0_$0_2 = InvalidName;
export type NameStartChar_$0_$0_$0_3 = NL;
export type Name = Name_1 | Name_2;
export interface Name_1 {
    kind: ASTKinds.Name_1;
    num: NameStartNumber;
}
export interface Name_2 {
    kind: ASTKinds.Name_2;
    ch: NameStartChar;
}
export type Number = NumberRX;
export interface LocalVariable {
    kind: ASTKinds.LocalVariable;
    pos: PosInfo;
    name: Name;
}
export interface GlobalVariable {
    kind: ASTKinds.GlobalVariable;
    pos: PosInfo;
    name: Name;
}
export type Variable = Variable_1 | Variable_2;
export interface Variable_1 {
    kind: ASTKinds.Variable_1;
    local: LocalVariable;
}
export interface Variable_2 {
    kind: ASTKinds.Variable_2;
    global: GlobalVariable;
}
export interface Return {
    kind: ASTKinds.Return;
    special: string;
}
export interface Break {
    kind: ASTKinds.Break;
    special: string;
}
export interface Continue {
    kind: ASTKinds.Continue;
    special: string;
}
export type StringSepDouble = string;
export type StringSepSingle = string;
export interface StringNL {
    kind: ASTKinds.StringNL;
    v: Empty[];
}
export interface CharInStringSingle {
    kind: ASTKinds.CharInStringSingle;
    ch: Char;
}
export type CharNLInStringSingleSingle = CharNLInStringSingleSingle_1 | CharNLInStringSingleSingle_2;
export interface CharNLInStringSingleSingle_1 {
    kind: ASTKinds.CharNLInStringSingleSingle_1;
    nl: StringNL;
}
export interface CharNLInStringSingleSingle_2 {
    kind: ASTKinds.CharNLInStringSingleSingle_2;
    ch: CharInStringSingle;
}
export type CharNLInStringMultiSingle = CharNLInStringMultiSingle_1 | CharNLInStringMultiSingle_2;
export interface CharNLInStringMultiSingle_1 {
    kind: ASTKinds.CharNLInStringMultiSingle_1;
    nl: NL;
}
export interface CharNLInStringMultiSingle_2 {
    kind: ASTKinds.CharNLInStringMultiSingle_2;
    ch: CharInStringSingle;
}
export interface StringSingleSingle {
    kind: ASTKinds.StringSingleSingle;
    v: CharNLInStringSingleSingle[];
}
export interface StringMultiSingle {
    kind: ASTKinds.StringMultiSingle;
    v: CharNLInStringMultiSingle[];
}
export type String_Single = String_Single_1 | String_Single_2;
export interface String_Single_1 {
    kind: ASTKinds.String_Single_1;
    single: StringSingleSingle;
}
export interface String_Single_2 {
    kind: ASTKinds.String_Single_2;
    multi: StringMultiSingle;
}
export type ExpSep = Space[];
export type ExpOpComma = string;
export type ExpOpOtherSet = ExpOpOtherSet_1 | ExpOpOtherSet_2 | ExpOpOtherSet_3 | ExpOpOtherSet_4 | ExpOpOtherSet_5 | ExpOpOtherSet_6 | ExpOpOtherSet_7 | ExpOpOtherSet_8 | ExpOpOtherSet_9 | ExpOpOtherSet_10 | ExpOpOtherSet_11;
export type ExpOpOtherSet_1 = string;
export type ExpOpOtherSet_2 = string;
export type ExpOpOtherSet_3 = string;
export type ExpOpOtherSet_4 = string;
export type ExpOpOtherSet_5 = string;
export type ExpOpOtherSet_6 = string;
export type ExpOpOtherSet_7 = string;
export type ExpOpOtherSet_8 = string;
export type ExpOpOtherSet_9 = string;
export type ExpOpOtherSet_10 = string;
export type ExpOpOtherSet_11 = string;
export type ExpOpSet = ExpOpSet_1 | ExpOpSet_2;
export type ExpOpSet_1 = string;
export type ExpOpSet_2 = string;
export type ExpOpOR = string;
export type ExpOpAND = string;
export type ExpOpCompare = ExpOpCompare_1 | ExpOpCompare_2 | ExpOpCompare_3 | ExpOpCompare_4 | ExpOpCompare_5 | ExpOpCompare_6 | ExpOpCompare_7 | ExpOpCompare_8;
export type ExpOpCompare_1 = string;
export type ExpOpCompare_2 = string;
export type ExpOpCompare_3 = string;
export type ExpOpCompare_4 = string;
export type ExpOpCompare_5 = string;
export type ExpOpCompare_6 = string;
export type ExpOpCompare_7 = string;
export type ExpOpCompare_8 = string;
export type ExpOp7 = string;
export type ExpOp8 = string;
export type ExpOp9 = string;
export type ExpOp10 = ExpOp10_1 | ExpOp10_2;
export type ExpOp10_1 = string;
export type ExpOp10_2 = string;
export type ExpOpNOT = string;
export interface ExpS1Sub {
    kind: ASTKinds.ExpS1Sub;
    enum: ExpOpComma;
    v: ExpS2;
}
export interface ExpS1 {
    kind: ASTKinds.ExpS1;
    head: ExpS2;
    tail: ExpS1Sub[];
}
export interface ExpS2Sub {
    kind: ASTKinds.ExpS2Sub;
    op_assign: ExpOpOtherSet;
    v: ExpS3;
}
export interface ExpS2 {
    kind: ASTKinds.ExpS2;
    head: ExpS3;
    tail: ExpS2Sub[];
}
export interface ExpS3Sub {
    kind: ASTKinds.ExpS3Sub;
    pos: PosInfo;
    assign: ExpOpSet;
    v: ExpS4;
}
export interface ExpS3 {
    kind: ASTKinds.ExpS3;
    head: ExpS4;
    tail: ExpS3Sub[];
}
export interface ExpS4Sub {
    kind: ASTKinds.ExpS4Sub;
    or: ExpOpOR;
    v: ExpS5;
}
export interface ExpS4 {
    kind: ASTKinds.ExpS4;
    head: ExpS5;
    tail: ExpS4Sub[];
}
export interface ExpS5Sub {
    kind: ASTKinds.ExpS5Sub;
    and: ExpOpAND;
    v: ExpS6;
}
export interface ExpS5 {
    kind: ASTKinds.ExpS5;
    head: ExpS6;
    tail: ExpS5Sub[];
}
export interface ExpS6Sub {
    kind: ASTKinds.ExpS6Sub;
    comparison: ExpOpCompare;
    v: ExpS7;
}
export interface ExpS6 {
    kind: ASTKinds.ExpS6;
    head: ExpS7;
    tail: ExpS6Sub[];
}
export interface ExpS7 {
    kind: ASTKinds.ExpS7;
    feedback: Nullable<ExpOp7>;
    tail: ExpS8;
}
export interface ExpS8Sub {
    kind: ASTKinds.ExpS8Sub;
    add: ExpOp8;
    v: ExpS9;
}
export interface ExpS8 {
    kind: ASTKinds.ExpS8;
    head: ExpS9;
    tail: ExpS8Sub[];
}
export interface ExpS9Sub {
    kind: ASTKinds.ExpS9Sub;
    multi: ExpOp9;
    v: ExpS10;
}
export interface ExpS9 {
    kind: ASTKinds.ExpS9;
    head: ExpS10;
    tail: ExpS9Sub[];
}
export interface ExpS10Sub {
    kind: ASTKinds.ExpS10Sub;
    inc: ExpOp10;
    v: ExpS11;
}
export interface ExpS10 {
    kind: ASTKinds.ExpS10;
    head: ExpS11;
    tail: ExpS10Sub[];
}
export interface ExpS11 {
    kind: ASTKinds.ExpS11;
    not: Nullable<ExpOpNOT>;
    tail: ExpS12;
}
export interface BracketIndexS {
    kind: ASTKinds.BracketIndexS;
    v: ExpInStringSub;
}
export interface BracketCallS {
    kind: ASTKinds.BracketCallS;
    v: ExpInStringSub;
}
export type WithBracketS = WithBracketS_1 | WithBracketS_2;
export interface WithBracketS_1 {
    kind: ASTKinds.WithBracketS_1;
    index: BracketIndexS;
}
export interface WithBracketS_2 {
    kind: ASTKinds.WithBracketS_2;
    call: BracketCallS;
}
export interface String_Single_Bracket {
    kind: ASTKinds.String_Single_Bracket;
    v: String_Single;
    index: BracketIndexS[];
}
export interface LocalVariableWithBracketS {
    kind: ASTKinds.LocalVariableWithBracketS;
    v: LocalVariable;
    index: BracketIndexS[];
}
export interface GlobalVariableWithBracketS {
    kind: ASTKinds.GlobalVariableWithBracketS;
    v: GlobalVariable;
    append: WithBracketS[];
}
export interface BracketExpS {
    kind: ASTKinds.BracketExpS;
    v: ExpS1;
    index: BracketIndexS[];
}
export type ExpS12 = ExpS12_1 | ExpS12_2 | ExpS12_3 | ExpS12_4 | ExpS12_5;
export interface ExpS12_1 {
    kind: ASTKinds.ExpS12_1;
    local: LocalVariableWithBracketS;
}
export interface ExpS12_2 {
    kind: ASTKinds.ExpS12_2;
    global: GlobalVariableWithBracketS;
}
export interface ExpS12_3 {
    kind: ASTKinds.ExpS12_3;
    num: Number;
}
export interface ExpS12_4 {
    kind: ASTKinds.ExpS12_4;
    str: String_Single_Bracket;
}
export interface ExpS12_5 {
    kind: ASTKinds.ExpS12_5;
    bracket: BracketExpS;
}
export type ExpInStringSub = ExpS1;
export interface ExpInString {
    kind: ASTKinds.ExpInString;
    v: ExpInStringSub;
}
export interface CharInString {
    kind: ASTKinds.CharInString;
    ch: Char;
}
export type CharInString_$0 = CharInString_$0_1 | CharInString_$0_2;
export type CharInString_$0_1 = string;
export type CharInString_$0_2 = StringSepDouble;
export type StringDoubleSub = StringDoubleSub_1 | StringDoubleSub_2 | StringDoubleSub_3;
export interface StringDoubleSub_1 {
    kind: ASTKinds.StringDoubleSub_1;
    exp: ExpInString;
}
export interface StringDoubleSub_2 {
    kind: ASTKinds.StringDoubleSub_2;
    nl: StringNL;
}
export interface StringDoubleSub_3 {
    kind: ASTKinds.StringDoubleSub_3;
    ch: CharInString;
}
export interface StringSingleDouble {
    kind: ASTKinds.StringSingleDouble;
    v: StringDoubleSub[];
}
export type StringSingle = StringSingle_1 | StringSingle_2;
export interface StringSingle_1 {
    kind: ASTKinds.StringSingle_1;
    single: StringSingleSingle;
}
export interface StringSingle_2 {
    kind: ASTKinds.StringSingle_2;
    double: StringSingleDouble;
}
export type Expression = Exp1;
export interface Exp1Sub {
    kind: ASTKinds.Exp1Sub;
    enum: ExpOpComma;
    v: Exp2;
}
export interface Exp1 {
    kind: ASTKinds.Exp1;
    head: Exp2;
    tail: Exp1Sub[];
}
export interface Exp2Sub {
    kind: ASTKinds.Exp2Sub;
    op_assign: ExpOpOtherSet;
    v: Exp3;
}
export interface Exp2 {
    kind: ASTKinds.Exp2;
    head: Exp3;
    tail: Exp2Sub[];
}
export interface Exp3Sub {
    kind: ASTKinds.Exp3Sub;
    pos: PosInfo;
    assign: ExpOpSet;
    v: Exp4;
}
export interface Exp3 {
    kind: ASTKinds.Exp3;
    head: Exp4;
    tail: Exp3Sub[];
}
export interface Exp4Sub {
    kind: ASTKinds.Exp4Sub;
    or: ExpOpOR;
    v: Exp5;
}
export interface Exp4 {
    kind: ASTKinds.Exp4;
    head: Exp5;
    tail: Exp4Sub[];
}
export interface Exp5Sub {
    kind: ASTKinds.Exp5Sub;
    and: ExpOpAND;
    v: Exp6;
}
export interface Exp5 {
    kind: ASTKinds.Exp5;
    head: Exp6;
    tail: Exp5Sub[];
}
export interface Exp6Sub {
    kind: ASTKinds.Exp6Sub;
    comparison: ExpOpCompare;
    v: Exp7;
}
export interface Exp6 {
    kind: ASTKinds.Exp6;
    head: Exp7;
    tail: Exp6Sub[];
}
export interface Exp7 {
    kind: ASTKinds.Exp7;
    feedback: Nullable<ExpOp7>;
    tail: Exp8;
}
export interface Exp8Sub {
    kind: ASTKinds.Exp8Sub;
    add: ExpOp8;
    v: Exp9;
}
export interface Exp8 {
    kind: ASTKinds.Exp8;
    head: Exp9;
    tail: Exp8Sub[];
}
export interface Exp9Sub {
    kind: ASTKinds.Exp9Sub;
    multi: ExpOp9;
    v: Exp10;
}
export interface Exp9 {
    kind: ASTKinds.Exp9;
    head: Exp10;
    tail: Exp9Sub[];
}
export interface Exp10Sub {
    kind: ASTKinds.Exp10Sub;
    inc: ExpOp10;
    v: Exp11;
}
export interface Exp10 {
    kind: ASTKinds.Exp10;
    head: Exp11;
    tail: Exp10Sub[];
}
export interface Exp11 {
    kind: ASTKinds.Exp11;
    not: Nullable<ExpOpNOT>;
    tail: Exp12;
}
export interface BracketIndex {
    kind: ASTKinds.BracketIndex;
    v: Expression;
}
export interface BracketCall {
    kind: ASTKinds.BracketCall;
    v: Expression;
}
export type WithBracket = WithBracket_1 | WithBracket_2;
export interface WithBracket_1 {
    kind: ASTKinds.WithBracket_1;
    index: BracketIndex;
}
export interface WithBracket_2 {
    kind: ASTKinds.WithBracket_2;
    call: BracketCall;
}
export interface BracketExp {
    kind: ASTKinds.BracketExp;
    v: Exp1;
    index: BracketIndex[];
}
export interface LocalVariableWithBracket {
    kind: ASTKinds.LocalVariableWithBracket;
    v: LocalVariable;
    index: BracketIndex[];
}
export interface GlobalVariableWithBracket {
    kind: ASTKinds.GlobalVariableWithBracket;
    v: GlobalVariable;
    append: WithBracket[];
}
export type Exp12 = Exp12_1 | Exp12_2 | Exp12_3 | Exp12_4 | Exp12_5;
export interface Exp12_1 {
    kind: ASTKinds.Exp12_1;
    local: LocalVariableWithBracket;
}
export interface Exp12_2 {
    kind: ASTKinds.Exp12_2;
    global: GlobalVariableWithBracket;
}
export interface Exp12_3 {
    kind: ASTKinds.Exp12_3;
    num: Number;
}
export interface Exp12_4 {
    kind: ASTKinds.Exp12_4;
    str: StringV;
}
export interface Exp12_5 {
    kind: ASTKinds.Exp12_5;
    bracket: BracketExp;
}
export type StringV = StringV_1 | StringV_2;
export interface StringV_1 {
    kind: ASTKinds.StringV_1;
    single: StringSingle;
}
export interface StringV_2 {
    kind: ASTKinds.StringV_2;
    multi: StringMulti;
}
export type String = StringV;
export type StringMulti = StringMulti_1 | StringMulti_2;
export interface StringMulti_1 {
    kind: ASTKinds.StringMulti_1;
    single: StringMultiSingle;
}
export interface StringMulti_2 {
    kind: ASTKinds.StringMulti_2;
    double: StringMultiDouble;
}
export interface ExpInStr {
    kind: ASTKinds.ExpInStr;
    v: Expression;
}
export interface StringMultiDouble {
    kind: ASTKinds.StringMultiDouble;
    v: StringDoubleSub[];
}
export type AlternativeSub = AlternativeSub_1 | AlternativeSub_2 | AlternativeSub_3 | AlternativeSub_4;
export type AlternativeSub_1 = string;
export type AlternativeSub_2 = string;
export type AlternativeSub_3 = string;
export type AlternativeSub_4 = string;
export type AlternativeParallel = AlternativeParallel_1 | AlternativeParallel_2;
export type AlternativeParallel_1 = string;
export type AlternativeParallel_2 = string;
export type Alternative = Alternative_1 | Alternative_2 | Alternative_3 | Alternative_4 | Alternative_5 | Alternative_6 | Alternative_7;
export type Alternative_1 = string;
export type Alternative_2 = string;
export type Alternative_3 = string;
export type Alternative_4 = string;
export type Alternative_5 = AlternativeSub;
export type Alternative_6 = Alternative_$0;
export type Alternative_7 = Alternative_$1;
export interface Alternative_$0 {
    kind: ASTKinds.Alternative_$0;
}
export interface Alternative_$1 {
    kind: ASTKinds.Alternative_$1;
}
export interface AlternativeSep {
    kind: ASTKinds.AlternativeSep;
    comment: Sep;
}
export type ForConditionSep = string;
export interface ForCondition {
    kind: ASTKinds.ForCondition;
    init: Expression;
    condition: Expression;
    next: Expression;
}
export interface ForCondition_$0 {
    kind: ASTKinds.ForCondition_$0;
}
export interface ForCondition_$1 {
    kind: ASTKinds.ForCondition_$1;
}
export interface ForeachCondition {
    kind: ASTKinds.ForeachCondition;
    array: Expression;
    var: Variable;
}
export interface ForeachCondition_$0 {
    kind: ASTKinds.ForeachCondition_$0;
}
export type Label = Label_1 | Label_2;
export interface Label_1 {
    kind: ASTKinds.Label_1;
    str: String;
}
export interface Label_2 {
    kind: ASTKinds.Label_2;
    num: Number;
}
export interface WhenConditionSub {
    kind: ASTKinds.WhenConditionSub;
    name: Label;
}
export type WhenConditionSub_$0 = WhenConditionSub_$0_1 | WhenConditionSub_$0_2;
export type WhenConditionSub_$0_1 = string;
export type WhenConditionSub_$0_2 = string;
export interface WhenCondition {
    kind: ASTKinds.WhenCondition;
    name: Label;
    names: WhenConditionSub[];
}
export type OneLineExpression = ScopeInner;
export type ScopeBegin = string;
export type ScopeEnd = string;
export interface ExpressionInBracket {
    kind: ASTKinds.ExpressionInBracket;
}
export type Condition = Condition_1 | Condition_2;
export interface Condition_1 {
    kind: ASTKinds.Condition_1;
    exp: Expression;
}
export interface Condition_2 {
    kind: ASTKinds.Condition_2;
    bracket: ExpressionInBracket;
}
export interface ScopeInClauseSub {
    kind: ASTKinds.ScopeInClauseSub;
    exp: OneLineExpression;
}
export type ScopeInClauseSub_$0 = ScopeInClauseSub_$0_1 | ScopeInClauseSub_$0_2;
export type ScopeInClauseSub_$0_1 = SepEx;
export type ScopeInClauseSub_$0_2 = Sep2;
export type ScopeInClause = ScopeInClause_1 | ScopeInClause_2;
export interface ScopeInClause_1 {
    kind: ASTKinds.ScopeInClause_1;
    one: ScopeInClauseSub;
}
export interface ScopeInClause_2 {
    kind: ASTKinds.ScopeInClause_2;
    scope: Scope1;
}
export interface Scope1Sub {
    kind: ASTKinds.Scope1Sub;
    alter: Alternative;
}
export interface Scope1 {
    kind: ASTKinds.Scope1;
    scope: Scope2;
}
export interface Scope2 {
    kind: ASTKinds.Scope2;
    scope: ScopeInner[];
}
export type ScopeInnerSub = ScopeInnerSub_1 | ScopeInnerSub_2 | ScopeInnerSub_3 | ScopeInnerSub_4 | ScopeInnerSub_5 | ScopeInnerSub_6 | ScopeInnerSub_7 | ScopeInnerSub_8 | ScopeInnerSub_9 | ScopeInnerSub_10 | ScopeInnerSub_11;
export interface ScopeInnerSub_1 {
    kind: ASTKinds.ScopeInnerSub_1;
    parallel: ScopeParallel;
}
export interface ScopeInnerSub_2 {
    kind: ASTKinds.ScopeInnerSub_2;
    scope: Scope1;
}
export interface ScopeInnerSub_3 {
    kind: ASTKinds.ScopeInnerSub_3;
    scope_if: ScopeIf;
}
export interface ScopeInnerSub_4 {
    kind: ASTKinds.ScopeInnerSub_4;
    scope_while: ScopeWhile;
}
export interface ScopeInnerSub_5 {
    kind: ASTKinds.ScopeInnerSub_5;
    scope_for: ScopeFor;
}
export interface ScopeInnerSub_6 {
    kind: ASTKinds.ScopeInnerSub_6;
    scope_foreach: ScopeForeach;
}
export interface ScopeInnerSub_7 {
    kind: ASTKinds.ScopeInnerSub_7;
    scope_case: ScopeCase;
}
export interface ScopeInnerSub_8 {
    kind: ASTKinds.ScopeInnerSub_8;
    scope_switch: ScopeSwitch;
}
export interface ScopeInnerSub_9 {
    kind: ASTKinds.ScopeInnerSub_9;
    alter: AlternativeSep;
}
export interface ScopeInnerSub_10 {
    kind: ASTKinds.ScopeInnerSub_10;
    exp: Expression;
}
export interface ScopeInnerSub_11 {
    kind: ASTKinds.ScopeInnerSub_11;
    empty: Empty;
}
export interface ScopeInner {
    kind: ASTKinds.ScopeInner;
    scope: ScopeInnerSub;
}
export type ScopeInner_$0 = ScopeInner_$0_1 | ScopeInner_$0_2;
export type ScopeInner_$0_1 = SepEx;
export type ScopeInner_$0_2 = Sep2;
export type ScopeInner_$1 = ScopeInner_$1_1 | ScopeInner_$1_2;
export type ScopeInner_$1_1 = SepEx;
export type ScopeInner_$1_2 = Sep2;
export interface ScopeParallel {
    kind: ASTKinds.ScopeParallel;
    exp: Expression;
}
export type ScopeParallel_$0 = ScopeParallel_$0_1 | ScopeParallel_$0_2;
export type ScopeParallel_$0_1 = string;
export type ScopeParallel_$0_2 = string;
export interface ScopeIfSubElseIf {
    kind: ASTKinds.ScopeIfSubElseIf;
    scope: ScopeIfElseIf;
}
export type ScopeIfSubElseIf_$0 = ScopeIfSubElseIf_$0_1 | ScopeIfSubElseIf_$0_2;
export type ScopeIfSubElseIf_$0_1 = SepEx;
export type ScopeIfSubElseIf_$0_2 = Sep2;
export interface ScopeIfSubElse {
    kind: ASTKinds.ScopeIfSubElse;
    scope: ScopeIfElse;
}
export type ScopeIfSubElse_$0 = ScopeIfSubElse_$0_1 | ScopeIfSubElse_$0_2;
export type ScopeIfSubElse_$0_1 = SepEx;
export type ScopeIfSubElse_$0_2 = Sep2;
export interface ScopeIf {
    kind: ASTKinds.ScopeIf;
    scope_if: ScopeIfIf;
    scope_elseif: ScopeIfSubElseIf[];
    scope_else: Nullable<ScopeIfSubElse>;
}
export interface ScopeIfSubIf {
    kind: ASTKinds.ScopeIfSubIf;
    condition: Condition;
    scope: ScopeInClause;
}
export interface ScopeIfIf {
    kind: ASTKinds.ScopeIfIf;
    scope: ScopeIfSubIf;
}
export interface ScopeIfElseIf {
    kind: ASTKinds.ScopeIfElseIf;
    scope: ScopeIfSubIf;
}
export interface ScopeIfElse {
    kind: ASTKinds.ScopeIfElse;
    scope: ScopeInClause;
}
export interface ScopeWhile {
    kind: ASTKinds.ScopeWhile;
    condition: Condition;
    scope: ScopeInClause;
}
export type ScopeForSub = ScopeForSub_1 | ScopeForSub_2;
export interface ScopeForSub_1 {
    kind: ASTKinds.ScopeForSub_1;
    raw: ForCondition;
}
export interface ScopeForSub_2 {
    kind: ASTKinds.ScopeForSub_2;
    bracket: ForCondition;
}
export interface ScopeFor {
    kind: ASTKinds.ScopeFor;
    scope: ScopeInClause;
}
export type ScopeForeachSub = ScopeForeachSub_1 | ScopeForeachSub_2;
export interface ScopeForeachSub_1 {
    kind: ASTKinds.ScopeForeachSub_1;
    raw: ForeachCondition;
}
export interface ScopeForeachSub_2 {
    kind: ASTKinds.ScopeForeachSub_2;
    bracket: ForeachCondition;
}
export interface ScopeForeach {
    kind: ASTKinds.ScopeForeach;
    scope: ScopeInClause;
}
export interface ScopeCase {
    kind: ASTKinds.ScopeCase;
    case: ScopeCaseCase;
}
export interface ScopeCaseCase {
    kind: ASTKinds.ScopeCaseCase;
    condition: Condition;
    when: ScopeCaseWhen[];
    others: Nullable<ScopeCaseOthers>;
}
export type ScopeCaseWhenSub = ScopeCaseWhenSub_1 | ScopeCaseWhenSub_2;
export interface ScopeCaseWhenSub_1 {
    kind: ASTKinds.ScopeCaseWhenSub_1;
    raw: WhenCondition;
}
export interface ScopeCaseWhenSub_2 {
    kind: ASTKinds.ScopeCaseWhenSub_2;
    bracket: WhenCondition;
}
export interface ScopeCaseWhen {
    kind: ASTKinds.ScopeCaseWhen;
    condition: ScopeCaseWhenSub;
    scope: ScopeInClause;
}
export interface ScopeCaseOthers {
    kind: ASTKinds.ScopeCaseOthers;
    scope: ScopeInClause;
}
export interface ScopeSwitch {
    kind: ASTKinds.ScopeSwitch;
    condition: Condition;
}
export type Scope = Scope1;
export type ScopeOuter = Scope2;
export interface FunctionName {
    kind: ASTKinds.FunctionName;
    pos: PosInfo;
    name: Name;
}
export interface FunctionAlternative {
    kind: ASTKinds.FunctionAlternative;
    alter: Alternative;
}
export interface Function {
    kind: ASTKinds.Function;
    name: FunctionName;
    alter: Nullable<FunctionAlternative>;
    body: ScopeOuter;
}
export type GrammarSub = GrammarSub_1 | GrammarSub_2;
export interface GrammarSub_1 {
    kind: ASTKinds.GrammarSub_1;
    func: Function;
}
export interface GrammarSub_2 {
    kind: ASTKinds.GrammarSub_2;
    empty: Empty;
}
export interface Grammar {
    kind: ASTKinds.Grammar;
    sub: GrammarSub[];
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.matchGrammar($$dpth + 1, $$cr);
    }
    public matchEOF($$dpth: number, $$cr?: ErrorTracker): Nullable<EOF> {
        return this.match$EOF($$cr);
    }
    public matchNL($$dpth: number, $$cr?: ErrorTracker): Nullable<NL> {
        return this.run<NL>($$dpth,
            () => {
                let $scope$ch: Nullable<string>;
                let $$res: Nullable<NL> = null;
                if (true
                    && ($scope$ch = this.regexAccept(String.raw`(?:\x0a)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NL, ch: $scope$ch};
                }
                return $$res;
            });
    }
    public matchAscii($$dpth: number, $$cr?: ErrorTracker): Nullable<Ascii> {
        return this.regexAccept(String.raw`(?:[\x00-\x7f])`, $$dpth + 1, $$cr);
    }
    public matchMBHead($$dpth: number, $$cr?: ErrorTracker): Nullable<MBHead> {
        return this.regexAccept(String.raw`(?:[\xc2-\xf4])`, $$dpth + 1, $$cr);
    }
    public matchMBData($$dpth: number, $$cr?: ErrorTracker): Nullable<MBData> {
        return this.regexAccept(String.raw`(?:[\x80-\xbf])`, $$dpth + 1, $$cr);
    }
    public matchMB($$dpth: number, $$cr?: ErrorTracker): Nullable<MB> {
        return this.regexAccept(String.raw`(?:[\S])`, $$dpth + 1, $$cr);
    }
    public matchChar($$dpth: number, $$cr?: ErrorTracker): Nullable<Char> {
        return this.run<Char>($$dpth,
            () => {
                let $scope$ch: Nullable<Char_$0>;
                let $$res: Nullable<Char> = null;
                if (true
                    && this.negate(() => this.matchNL($$dpth + 1, $$cr)) !== null
                    && ($scope$ch = this.matchChar_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Char, ch: $scope$ch};
                }
                return $$res;
            });
    }
    public matchChar_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Char_$0> {
        return this.choice<Char_$0>([
            () => this.matchChar_$0_1($$dpth + 1, $$cr),
            () => this.matchChar_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchChar_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Char_$0_1> {
        return this.matchAscii($$dpth + 1, $$cr);
    }
    public matchChar_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Char_$0_2> {
        return this.matchMB($$dpth + 1, $$cr);
    }
    public matchNumberZ($$dpth: number, $$cr?: ErrorTracker): Nullable<NumberZ> {
        return this.run<NumberZ>($$dpth,
            () => {
                let $scope$sign: Nullable<Nullable<string>>;
                let $scope$num: Nullable<string>;
                let $$res: Nullable<NumberZ> = null;
                if (true
                    && (($scope$sign = this.regexAccept(String.raw`(?:[+-])`, $$dpth + 1, $$cr)) || true)
                    && ($scope$num = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NumberZ, sign: $scope$sign, num: $scope$num};
                }
                return $$res;
            });
    }
    public matchNumberF($$dpth: number, $$cr?: ErrorTracker): Nullable<NumberF> {
        return this.run<NumberF>($$dpth,
            () => {
                let $scope$v: Nullable<string[]>;
                let $$res: Nullable<NumberF> = null;
                if (true
                    && this.regexAccept(String.raw`(?:.)`, $$dpth + 1, $$cr) !== null
                    && ($scope$v = this.loop<string>(() => this.regexAccept(String.raw`(?:[0-9])`, $$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.NumberF, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchNumberR($$dpth: number, $$cr?: ErrorTracker): Nullable<NumberR> {
        return this.run<NumberR>($$dpth,
            () => {
                let $scope$num: Nullable<NumberZ>;
                let $scope$float: Nullable<Nullable<NumberF>>;
                let $$res: Nullable<NumberR> = null;
                if (true
                    && ($scope$num = this.matchNumberZ($$dpth + 1, $$cr)) !== null
                    && (($scope$float = this.matchNumberF($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.NumberR, num: $scope$num, float: $scope$float};
                }
                return $$res;
            });
    }
    public matchNumberX($$dpth: number, $$cr?: ErrorTracker): Nullable<NumberX> {
        return this.run<NumberX>($$dpth,
            () => {
                let $scope$sign: Nullable<Nullable<string>>;
                let $scope$v: Nullable<string[]>;
                let $$res: Nullable<NumberX> = null;
                if (true
                    && (($scope$sign = this.regexAccept(String.raw`(?:[+-])`, $$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:0x)`, $$dpth + 1, $$cr) !== null
                    && ($scope$v = this.loop<string>(() => this.regexAccept(String.raw`(?:[0-9A-Fa-f])`, $$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.NumberX, sign: $scope$sign, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchNumberRX($$dpth: number, $$cr?: ErrorTracker): Nullable<NumberRX> {
        return this.choice<NumberRX>([
            () => this.matchNumberRX_1($$dpth + 1, $$cr),
            () => this.matchNumberRX_2($$dpth + 1, $$cr),
        ]);
    }
    public matchNumberRX_1($$dpth: number, $$cr?: ErrorTracker): Nullable<NumberRX_1> {
        return this.run<NumberRX_1>($$dpth,
            () => {
                let $scope$num: Nullable<NumberX>;
                let $$res: Nullable<NumberRX_1> = null;
                if (true
                    && ($scope$num = this.matchNumberX($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NumberRX_1, num: $scope$num};
                }
                return $$res;
            });
    }
    public matchNumberRX_2($$dpth: number, $$cr?: ErrorTracker): Nullable<NumberRX_2> {
        return this.run<NumberRX_2>($$dpth,
            () => {
                let $scope$num: Nullable<NumberR>;
                let $$res: Nullable<NumberRX_2> = null;
                if (true
                    && ($scope$num = this.matchNumberR($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.NumberRX_2, num: $scope$num};
                }
                return $$res;
            });
    }
    public matchSpace($$dpth: number, $$cr?: ErrorTracker): Nullable<Space> {
        return this.choice<Space>([
            () => this.matchSpace_1($$dpth + 1, $$cr),
            () => this.matchSpace_2($$dpth + 1, $$cr),
            () => this.matchSpace_3($$dpth + 1, $$cr),
        ]);
    }
    public matchSpace_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Space_1> {
        return this.regexAccept(String.raw`(?:[ \t\f])`, $$dpth + 1, $$cr);
    }
    public matchSpace_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Space_2> {
        return this.regexAccept(String.raw`(?:/\x0a)`, $$dpth + 1, $$cr);
    }
    public matchSpace_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Space_3> {
        return this.matchBlockComment($$dpth + 1, $$cr);
    }
    public matchLineComment($$dpth: number, $$cr?: ErrorTracker): Nullable<LineComment> {
        return this.run<LineComment>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$comment: Nullable<LineComment_$0>;
                let $$res: Nullable<LineComment> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?://)`, $$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                    && ($scope$comment = this.matchLineComment_$0($$dpth + 1, $$cr)) !== null
                    && this.matchNL($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.LineComment, pos: $scope$pos, comment: $scope$comment};
                }
                return $$res;
            });
    }
    public matchLineComment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<LineComment_$0> {
        return this.loop<Char>(() => this.matchChar($$dpth + 1, $$cr), true);
    }
    public matchBlockComment($$dpth: number, $$cr?: ErrorTracker): Nullable<BlockComment> {
        return this.run<BlockComment>($$dpth,
            () => {
                let $$res: Nullable<BlockComment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:/\*)`, $$dpth + 1, $$cr) !== null
                    && this.loop<BlockComment_$0>(() => this.matchBlockComment_$0($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\*/)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BlockComment, };
                }
                return $$res;
            });
    }
    public matchBlockComment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<BlockComment_$0> {
        return this.run<BlockComment_$0>($$dpth,
            () => {
                let $$res: Nullable<BlockComment_$0> = null;
                if (true
                    && this.negate(() => this.regexAccept(String.raw`(?:\*/)`, $$dpth + 1, $$cr)) !== null
                    && this.matchChar($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BlockComment_$0, };
                }
                return $$res;
            });
    }
    public matchSep($$dpth: number, $$cr?: ErrorTracker): Nullable<Sep> {
        return this.choice<Sep>([
            () => this.matchSep_1($$dpth + 1, $$cr),
            () => this.matchSep_2($$dpth + 1, $$cr),
        ]);
    }
    public matchSep_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Sep_1> {
        return this.matchNL($$dpth + 1, $$cr);
    }
    public matchSep_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Sep_2> {
        return this.matchLineComment($$dpth + 1, $$cr);
    }
    public matchSep2($$dpth: number, $$cr?: ErrorTracker): Nullable<Sep2> {
        return this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr);
    }
    public matchEmpty($$dpth: number, $$cr?: ErrorTracker): Nullable<Empty> {
        return this.choice<Empty>([
            () => this.matchEmpty_1($$dpth + 1, $$cr),
            () => this.matchEmpty_2($$dpth + 1, $$cr),
        ]);
    }
    public matchEmpty_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Empty_1> {
        return this.matchEmpty_$0($$dpth + 1, $$cr);
    }
    public matchEmpty_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Empty_2> {
        return this.run<Empty_2>($$dpth,
            () => {
                let $scope$comment: Nullable<LineComment>;
                let $$res: Nullable<Empty_2> = null;
                if (true
                    && ($scope$comment = this.matchLineComment($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Empty_2, comment: $scope$comment};
                }
                return $$res;
            });
    }
    public matchEmpty_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Empty_$0> {
        return this.run<Empty_$0>($$dpth,
            () => {
                let $$res: Nullable<Empty_$0> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.matchNL($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Empty_$0, };
                }
                return $$res;
            });
    }
    public matchSepEx($$dpth: number, $$cr?: ErrorTracker): Nullable<SepEx> {
        return this.choice<SepEx>([
            () => this.matchSepEx_1($$dpth + 1, $$cr),
            () => this.matchSepEx_2($$dpth + 1, $$cr),
        ]);
    }
    public matchSepEx_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SepEx_1> {
        return this.matchNL($$dpth + 1, $$cr);
    }
    public matchSepEx_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SepEx_2> {
        return this.matchSpace($$dpth + 1, $$cr);
    }
    public matchReserve($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve> {
        return this.choice<Reserve>([
            () => this.matchReserve_1($$dpth + 1, $$cr),
            () => this.matchReserve_2($$dpth + 1, $$cr),
            () => this.matchReserve_3($$dpth + 1, $$cr),
            () => this.matchReserve_4($$dpth + 1, $$cr),
            () => this.matchReserve_5($$dpth + 1, $$cr),
            () => this.matchReserve_6($$dpth + 1, $$cr),
            () => this.matchReserve_7($$dpth + 1, $$cr),
            () => this.matchReserve_8($$dpth + 1, $$cr),
            () => this.matchReserve_9($$dpth + 1, $$cr),
            () => this.matchReserve_10($$dpth + 1, $$cr),
            () => this.matchReserve_11($$dpth + 1, $$cr),
            () => this.matchReserve_12($$dpth + 1, $$cr),
        ]);
    }
    public matchReserve_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_1> {
        return this.regexAccept(String.raw`(?:if)`, $$dpth + 1, $$cr);
    }
    public matchReserve_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_2> {
        return this.regexAccept(String.raw`(?:elseif)`, $$dpth + 1, $$cr);
    }
    public matchReserve_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_3> {
        return this.regexAccept(String.raw`(?:else)`, $$dpth + 1, $$cr);
    }
    public matchReserve_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_4> {
        return this.regexAccept(String.raw`(?:case)`, $$dpth + 1, $$cr);
    }
    public matchReserve_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_5> {
        return this.regexAccept(String.raw`(?:when)`, $$dpth + 1, $$cr);
    }
    public matchReserve_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_6> {
        return this.regexAccept(String.raw`(?:others)`, $$dpth + 1, $$cr);
    }
    public matchReserve_7($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_7> {
        return this.regexAccept(String.raw`(?:switch)`, $$dpth + 1, $$cr);
    }
    public matchReserve_8($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_8> {
        return this.run<Reserve_8>($$dpth,
            () => {
                let $$res: Nullable<Reserve_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:while)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:for)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Reserve_8, };
                }
                return $$res;
            });
    }
    public matchReserve_9($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_9> {
        return this.regexAccept(String.raw`(?:break)`, $$dpth + 1, $$cr);
    }
    public matchReserve_10($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_10> {
        return this.regexAccept(String.raw`(?:continue)`, $$dpth + 1, $$cr);
    }
    public matchReserve_11($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_11> {
        return this.regexAccept(String.raw`(?:return)`, $$dpth + 1, $$cr);
    }
    public matchReserve_12($$dpth: number, $$cr?: ErrorTracker): Nullable<Reserve_12> {
        return this.regexAccept(String.raw`(?:foreach)`, $$dpth + 1, $$cr);
    }
    public matchInvalidName($$dpth: number, $$cr?: ErrorTracker): Nullable<InvalidName> {
        return this.regexAccept(String.raw`(?:[ !"#$%&\'(),+\-*/:;<=>?@[\]\`{|}\t\f])`, $$dpth + 1, $$cr);
    }
    public matchInvalidNameHead($$dpth: number, $$cr?: ErrorTracker): Nullable<InvalidNameHead> {
        return this.choice<InvalidNameHead>([
            () => this.matchInvalidNameHead_1($$dpth + 1, $$cr),
            () => this.matchInvalidNameHead_2($$dpth + 1, $$cr),
        ]);
    }
    public matchInvalidNameHead_1($$dpth: number, $$cr?: ErrorTracker): Nullable<InvalidNameHead_1> {
        return this.regexAccept(String.raw`(?:[0-9])`, $$dpth + 1, $$cr);
    }
    public matchInvalidNameHead_2($$dpth: number, $$cr?: ErrorTracker): Nullable<InvalidNameHead_2> {
        return this.matchInvalidName($$dpth + 1, $$cr);
    }
    public matchValidNameChar($$dpth: number, $$cr?: ErrorTracker): Nullable<ValidNameChar> {
        return this.run<ValidNameChar>($$dpth,
            () => {
                let $scope$ch: Nullable<Char>;
                let $$res: Nullable<ValidNameChar> = null;
                if (true
                    && this.negate(() => this.matchInvalidName($$dpth + 1, $$cr)) !== null
                    && ($scope$ch = this.matchChar($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ValidNameChar, ch: $scope$ch};
                }
                return $$res;
            });
    }
    public matchNameStartNumber($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartNumber> {
        return this.run<NameStartNumber>($$dpth,
            () => {
                let $scope$num: Nullable<string[]>;
                let $scope$name: Nullable<ValidNameChar[]>;
                let $$res: Nullable<NameStartNumber> = null;
                if (true
                    && ($scope$num = this.loop<string>(() => this.regexAccept(String.raw`(?:[0-9])`, $$dpth + 1, $$cr), false)) !== null
                    && ($scope$name = this.loop<ValidNameChar>(() => this.matchValidNameChar($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.NameStartNumber, num: $scope$num, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchNameStartChar($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartChar> {
        return this.run<NameStartChar>($$dpth,
            () => {
                let $scope$name: Nullable<ValidNameChar[]>;
                let $$res: Nullable<NameStartChar> = null;
                if (true
                    && this.negate(() => this.matchNameStartChar_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$name = this.loop<ValidNameChar>(() => this.matchValidNameChar($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.NameStartChar, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchNameStartChar_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartChar_$0> {
        return this.choice<NameStartChar_$0>([
            () => this.matchNameStartChar_$0_1($$dpth + 1, $$cr),
            () => this.matchNameStartChar_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchNameStartChar_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartChar_$0_1> {
        return this.matchInvalidNameHead($$dpth + 1, $$cr);
    }
    public matchNameStartChar_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartChar_$0_2> {
        return this.matchNameStartChar_$0_$0($$dpth + 1, $$cr);
    }
    public matchNameStartChar_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartChar_$0_$0> {
        return this.run<NameStartChar_$0_$0>($$dpth,
            () => {
                let $$res: Nullable<NameStartChar_$0_$0> = null;
                if (true
                    && this.matchReserve($$dpth + 1, $$cr) !== null
                    && this.matchNameStartChar_$0_$0_$0($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.NameStartChar_$0_$0, };
                }
                return $$res;
            });
    }
    public matchNameStartChar_$0_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartChar_$0_$0_$0> {
        return this.choice<NameStartChar_$0_$0_$0>([
            () => this.matchNameStartChar_$0_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchNameStartChar_$0_$0_$0_2($$dpth + 1, $$cr),
            () => this.matchNameStartChar_$0_$0_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchNameStartChar_$0_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartChar_$0_$0_$0_1> {
        return this.matchEOF($$dpth + 1, $$cr);
    }
    public matchNameStartChar_$0_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartChar_$0_$0_$0_2> {
        return this.matchInvalidName($$dpth + 1, $$cr);
    }
    public matchNameStartChar_$0_$0_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<NameStartChar_$0_$0_$0_3> {
        return this.matchNL($$dpth + 1, $$cr);
    }
    public matchName($$dpth: number, $$cr?: ErrorTracker): Nullable<Name> {
        return this.choice<Name>([
            () => this.matchName_1($$dpth + 1, $$cr),
            () => this.matchName_2($$dpth + 1, $$cr),
        ]);
    }
    public matchName_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Name_1> {
        return this.run<Name_1>($$dpth,
            () => {
                let $scope$num: Nullable<NameStartNumber>;
                let $$res: Nullable<Name_1> = null;
                if (true
                    && ($scope$num = this.matchNameStartNumber($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Name_1, num: $scope$num};
                }
                return $$res;
            });
    }
    public matchName_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Name_2> {
        return this.run<Name_2>($$dpth,
            () => {
                let $scope$ch: Nullable<NameStartChar>;
                let $$res: Nullable<Name_2> = null;
                if (true
                    && ($scope$ch = this.matchNameStartChar($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Name_2, ch: $scope$ch};
                }
                return $$res;
            });
    }
    public matchNumber($$dpth: number, $$cr?: ErrorTracker): Nullable<Number> {
        return this.matchNumberRX($$dpth + 1, $$cr);
    }
    public matchLocalVariable($$dpth: number, $$cr?: ErrorTracker): Nullable<LocalVariable> {
        return this.run<LocalVariable>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $$res: Nullable<LocalVariable> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:_)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.LocalVariable, pos: $scope$pos, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchGlobalVariable($$dpth: number, $$cr?: ErrorTracker): Nullable<GlobalVariable> {
        return this.run<GlobalVariable>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $$res: Nullable<GlobalVariable> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:_)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.GlobalVariable, pos: $scope$pos, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchVariable($$dpth: number, $$cr?: ErrorTracker): Nullable<Variable> {
        return this.choice<Variable>([
            () => this.matchVariable_1($$dpth + 1, $$cr),
            () => this.matchVariable_2($$dpth + 1, $$cr),
        ]);
    }
    public matchVariable_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Variable_1> {
        return this.run<Variable_1>($$dpth,
            () => {
                let $scope$local: Nullable<LocalVariable>;
                let $$res: Nullable<Variable_1> = null;
                if (true
                    && ($scope$local = this.matchLocalVariable($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Variable_1, local: $scope$local};
                }
                return $$res;
            });
    }
    public matchVariable_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Variable_2> {
        return this.run<Variable_2>($$dpth,
            () => {
                let $scope$global: Nullable<GlobalVariable>;
                let $$res: Nullable<Variable_2> = null;
                if (true
                    && ($scope$global = this.matchGlobalVariable($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Variable_2, global: $scope$global};
                }
                return $$res;
            });
    }
    public matchReturn($$dpth: number, $$cr?: ErrorTracker): Nullable<Return> {
        return this.run<Return>($$dpth,
            () => {
                let $scope$special: Nullable<string>;
                let $$res: Nullable<Return> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$special = this.regexAccept(String.raw`(?:return)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Return, special: $scope$special};
                }
                return $$res;
            });
    }
    public matchBreak($$dpth: number, $$cr?: ErrorTracker): Nullable<Break> {
        return this.run<Break>($$dpth,
            () => {
                let $scope$special: Nullable<string>;
                let $$res: Nullable<Break> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$special = this.regexAccept(String.raw`(?:break)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Break, special: $scope$special};
                }
                return $$res;
            });
    }
    public matchContinue($$dpth: number, $$cr?: ErrorTracker): Nullable<Continue> {
        return this.run<Continue>($$dpth,
            () => {
                let $scope$special: Nullable<string>;
                let $$res: Nullable<Continue> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$special = this.regexAccept(String.raw`(?:continue)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Continue, special: $scope$special};
                }
                return $$res;
            });
    }
    public matchStringSepDouble($$dpth: number, $$cr?: ErrorTracker): Nullable<StringSepDouble> {
        return this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr);
    }
    public matchStringSepSingle($$dpth: number, $$cr?: ErrorTracker): Nullable<StringSepSingle> {
        return this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr);
    }
    public matchStringNL($$dpth: number, $$cr?: ErrorTracker): Nullable<StringNL> {
        return this.run<StringNL>($$dpth,
            () => {
                let $scope$v: Nullable<Empty[]>;
                let $$res: Nullable<StringNL> = null;
                if (true
                    && this.regexAccept(String.raw`(?:/)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.matchNL($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.loop<Empty>(() => this.matchEmpty($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringNL, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchCharInStringSingle($$dpth: number, $$cr?: ErrorTracker): Nullable<CharInStringSingle> {
        return this.run<CharInStringSingle>($$dpth,
            () => {
                let $scope$ch: Nullable<Char>;
                let $$res: Nullable<CharInStringSingle> = null;
                if (true
                    && this.negate(() => this.matchStringSepSingle($$dpth + 1, $$cr)) !== null
                    && ($scope$ch = this.matchChar($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CharInStringSingle, ch: $scope$ch};
                }
                return $$res;
            });
    }
    public matchCharNLInStringSingleSingle($$dpth: number, $$cr?: ErrorTracker): Nullable<CharNLInStringSingleSingle> {
        return this.choice<CharNLInStringSingleSingle>([
            () => this.matchCharNLInStringSingleSingle_1($$dpth + 1, $$cr),
            () => this.matchCharNLInStringSingleSingle_2($$dpth + 1, $$cr),
        ]);
    }
    public matchCharNLInStringSingleSingle_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CharNLInStringSingleSingle_1> {
        return this.run<CharNLInStringSingleSingle_1>($$dpth,
            () => {
                let $scope$nl: Nullable<StringNL>;
                let $$res: Nullable<CharNLInStringSingleSingle_1> = null;
                if (true
                    && ($scope$nl = this.matchStringNL($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CharNLInStringSingleSingle_1, nl: $scope$nl};
                }
                return $$res;
            });
    }
    public matchCharNLInStringSingleSingle_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CharNLInStringSingleSingle_2> {
        return this.run<CharNLInStringSingleSingle_2>($$dpth,
            () => {
                let $scope$ch: Nullable<CharInStringSingle>;
                let $$res: Nullable<CharNLInStringSingleSingle_2> = null;
                if (true
                    && ($scope$ch = this.matchCharInStringSingle($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CharNLInStringSingleSingle_2, ch: $scope$ch};
                }
                return $$res;
            });
    }
    public matchCharNLInStringMultiSingle($$dpth: number, $$cr?: ErrorTracker): Nullable<CharNLInStringMultiSingle> {
        return this.choice<CharNLInStringMultiSingle>([
            () => this.matchCharNLInStringMultiSingle_1($$dpth + 1, $$cr),
            () => this.matchCharNLInStringMultiSingle_2($$dpth + 1, $$cr),
        ]);
    }
    public matchCharNLInStringMultiSingle_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CharNLInStringMultiSingle_1> {
        return this.run<CharNLInStringMultiSingle_1>($$dpth,
            () => {
                let $scope$nl: Nullable<NL>;
                let $$res: Nullable<CharNLInStringMultiSingle_1> = null;
                if (true
                    && ($scope$nl = this.matchNL($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CharNLInStringMultiSingle_1, nl: $scope$nl};
                }
                return $$res;
            });
    }
    public matchCharNLInStringMultiSingle_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CharNLInStringMultiSingle_2> {
        return this.run<CharNLInStringMultiSingle_2>($$dpth,
            () => {
                let $scope$ch: Nullable<CharInStringSingle>;
                let $$res: Nullable<CharNLInStringMultiSingle_2> = null;
                if (true
                    && ($scope$ch = this.matchCharInStringSingle($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CharNLInStringMultiSingle_2, ch: $scope$ch};
                }
                return $$res;
            });
    }
    public matchStringSingleSingle($$dpth: number, $$cr?: ErrorTracker): Nullable<StringSingleSingle> {
        return this.run<StringSingleSingle>($$dpth,
            () => {
                let $scope$v: Nullable<CharNLInStringSingleSingle[]>;
                let $$res: Nullable<StringSingleSingle> = null;
                if (true
                    && this.matchStringSepSingle($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.loop<CharNLInStringSingleSingle>(() => this.matchCharNLInStringSingleSingle($$dpth + 1, $$cr), true)) !== null
                    && this.matchStringSepSingle($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.StringSingleSingle, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchStringMultiSingle($$dpth: number, $$cr?: ErrorTracker): Nullable<StringMultiSingle> {
        return this.run<StringMultiSingle>($$dpth,
            () => {
                let $scope$v: Nullable<CharNLInStringMultiSingle[]>;
                let $$res: Nullable<StringMultiSingle> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<<)`, $$dpth + 1, $$cr) !== null
                    && this.matchStringSepSingle($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.loop<CharNLInStringMultiSingle>(() => this.matchCharNLInStringMultiSingle($$dpth + 1, $$cr), true)) !== null
                    && this.matchStringSepSingle($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>>)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.StringMultiSingle, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchString_Single($$dpth: number, $$cr?: ErrorTracker): Nullable<String_Single> {
        return this.choice<String_Single>([
            () => this.matchString_Single_1($$dpth + 1, $$cr),
            () => this.matchString_Single_2($$dpth + 1, $$cr),
        ]);
    }
    public matchString_Single_1($$dpth: number, $$cr?: ErrorTracker): Nullable<String_Single_1> {
        return this.run<String_Single_1>($$dpth,
            () => {
                let $scope$single: Nullable<StringSingleSingle>;
                let $$res: Nullable<String_Single_1> = null;
                if (true
                    && ($scope$single = this.matchStringSingleSingle($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.String_Single_1, single: $scope$single};
                }
                return $$res;
            });
    }
    public matchString_Single_2($$dpth: number, $$cr?: ErrorTracker): Nullable<String_Single_2> {
        return this.run<String_Single_2>($$dpth,
            () => {
                let $scope$multi: Nullable<StringMultiSingle>;
                let $$res: Nullable<String_Single_2> = null;
                if (true
                    && ($scope$multi = this.matchStringMultiSingle($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.String_Single_2, multi: $scope$multi};
                }
                return $$res;
            });
    }
    public matchExpSep($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpSep> {
        return this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true);
    }
    public matchExpOpComma($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpComma> {
        return this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet> {
        return this.choice<ExpOpOtherSet>([
            () => this.matchExpOpOtherSet_1($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_2($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_3($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_4($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_5($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_6($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_7($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_8($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_9($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_10($$dpth + 1, $$cr),
            () => this.matchExpOpOtherSet_11($$dpth + 1, $$cr),
        ]);
    }
    public matchExpOpOtherSet_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_1> {
        return this.regexAccept(String.raw`(?:\+=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_2> {
        return this.regexAccept(String.raw`(?:-=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_3> {
        return this.regexAccept(String.raw`(?:\*=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_4> {
        return this.regexAccept(String.raw`(?:/=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_5> {
        return this.regexAccept(String.raw`(?:%=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_6($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_6> {
        return this.regexAccept(String.raw`(?:\+:=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_7($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_7> {
        return this.regexAccept(String.raw`(?:-:=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_8($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_8> {
        return this.regexAccept(String.raw`(?:\*:=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_9($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_9> {
        return this.regexAccept(String.raw`(?:/:=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_10($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_10> {
        return this.regexAccept(String.raw`(?:%:=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOtherSet_11($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOtherSet_11> {
        return this.regexAccept(String.raw`(?:,=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpSet($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpSet> {
        return this.choice<ExpOpSet>([
            () => this.matchExpOpSet_1($$dpth + 1, $$cr),
            () => this.matchExpOpSet_2($$dpth + 1, $$cr),
        ]);
    }
    public matchExpOpSet_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpSet_1> {
        return this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpSet_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpSet_2> {
        return this.regexAccept(String.raw`(?::=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpOR($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpOR> {
        return this.regexAccept(String.raw`(?:\|\|)`, $$dpth + 1, $$cr);
    }
    public matchExpOpAND($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpAND> {
        return this.regexAccept(String.raw`(?:&&)`, $$dpth + 1, $$cr);
    }
    public matchExpOpCompare($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpCompare> {
        return this.choice<ExpOpCompare>([
            () => this.matchExpOpCompare_1($$dpth + 1, $$cr),
            () => this.matchExpOpCompare_2($$dpth + 1, $$cr),
            () => this.matchExpOpCompare_3($$dpth + 1, $$cr),
            () => this.matchExpOpCompare_4($$dpth + 1, $$cr),
            () => this.matchExpOpCompare_5($$dpth + 1, $$cr),
            () => this.matchExpOpCompare_6($$dpth + 1, $$cr),
            () => this.matchExpOpCompare_7($$dpth + 1, $$cr),
            () => this.matchExpOpCompare_8($$dpth + 1, $$cr),
        ]);
    }
    public matchExpOpCompare_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpCompare_1> {
        return this.regexAccept(String.raw`(?:==)`, $$dpth + 1, $$cr);
    }
    public matchExpOpCompare_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpCompare_2> {
        return this.regexAccept(String.raw`(?:!=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpCompare_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpCompare_3> {
        return this.regexAccept(String.raw`(?:<=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpCompare_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpCompare_4> {
        return this.regexAccept(String.raw`(?:>=)`, $$dpth + 1, $$cr);
    }
    public matchExpOpCompare_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpCompare_5> {
        return this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr);
    }
    public matchExpOpCompare_6($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpCompare_6> {
        return this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr);
    }
    public matchExpOpCompare_7($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpCompare_7> {
        return this.regexAccept(String.raw`(?:_in_)`, $$dpth + 1, $$cr);
    }
    public matchExpOpCompare_8($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpCompare_8> {
        return this.regexAccept(String.raw`(?:!_in_)`, $$dpth + 1, $$cr);
    }
    public matchExpOp7($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOp7> {
        return this.regexAccept(String.raw`(?:&)`, $$dpth + 1, $$cr);
    }
    public matchExpOp8($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOp8> {
        return this.regexAccept(String.raw`(?:[+-])`, $$dpth + 1, $$cr);
    }
    public matchExpOp9($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOp9> {
        return this.regexAccept(String.raw`(?:[*/%])`, $$dpth + 1, $$cr);
    }
    public matchExpOp10($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOp10> {
        return this.choice<ExpOp10>([
            () => this.matchExpOp10_1($$dpth + 1, $$cr),
            () => this.matchExpOp10_2($$dpth + 1, $$cr),
        ]);
    }
    public matchExpOp10_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOp10_1> {
        return this.regexAccept(String.raw`(?:\+\+)`, $$dpth + 1, $$cr);
    }
    public matchExpOp10_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOp10_2> {
        return this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr);
    }
    public matchExpOpNOT($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpOpNOT> {
        return this.regexAccept(String.raw`(?:!)`, $$dpth + 1, $$cr);
    }
    public matchExpS1Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS1Sub> {
        return this.run<ExpS1Sub>($$dpth,
            () => {
                let $scope$enum: Nullable<ExpOpComma>;
                let $scope$v: Nullable<ExpS2>;
                let $$res: Nullable<ExpS1Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$enum = this.matchExpOpComma($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS1Sub, enum: $scope$enum, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExpS1($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS1> {
        return this.run<ExpS1>($$dpth,
            () => {
                let $scope$head: Nullable<ExpS2>;
                let $scope$tail: Nullable<ExpS1Sub[]>;
                let $$res: Nullable<ExpS1> = null;
                if (true
                    && ($scope$head = this.matchExpS2($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<ExpS1Sub>(() => this.matchExpS1Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS1, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS2Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS2Sub> {
        return this.run<ExpS2Sub>($$dpth,
            () => {
                let $scope$op_assign: Nullable<ExpOpOtherSet>;
                let $scope$v: Nullable<ExpS3>;
                let $$res: Nullable<ExpS2Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$op_assign = this.matchExpOpOtherSet($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS2Sub, op_assign: $scope$op_assign, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExpS2($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS2> {
        return this.run<ExpS2>($$dpth,
            () => {
                let $scope$head: Nullable<ExpS3>;
                let $scope$tail: Nullable<ExpS2Sub[]>;
                let $$res: Nullable<ExpS2> = null;
                if (true
                    && ($scope$head = this.matchExpS3($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<ExpS2Sub>(() => this.matchExpS2Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS2, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS3Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS3Sub> {
        return this.run<ExpS3Sub>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$assign: Nullable<ExpOpSet>;
                let $scope$v: Nullable<ExpS4>;
                let $$res: Nullable<ExpS3Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                    && ($scope$assign = this.matchExpOpSet($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS4($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS3Sub, pos: $scope$pos, assign: $scope$assign, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExpS3($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS3> {
        return this.run<ExpS3>($$dpth,
            () => {
                let $scope$head: Nullable<ExpS4>;
                let $scope$tail: Nullable<ExpS3Sub[]>;
                let $$res: Nullable<ExpS3> = null;
                if (true
                    && ($scope$head = this.matchExpS4($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<ExpS3Sub>(() => this.matchExpS3Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS3, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS4Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS4Sub> {
        return this.run<ExpS4Sub>($$dpth,
            () => {
                let $scope$or: Nullable<ExpOpOR>;
                let $scope$v: Nullable<ExpS5>;
                let $$res: Nullable<ExpS4Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$or = this.matchExpOpOR($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS5($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS4Sub, or: $scope$or, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExpS4($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS4> {
        return this.run<ExpS4>($$dpth,
            () => {
                let $scope$head: Nullable<ExpS5>;
                let $scope$tail: Nullable<ExpS4Sub[]>;
                let $$res: Nullable<ExpS4> = null;
                if (true
                    && ($scope$head = this.matchExpS5($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<ExpS4Sub>(() => this.matchExpS4Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS4, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS5Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS5Sub> {
        return this.run<ExpS5Sub>($$dpth,
            () => {
                let $scope$and: Nullable<ExpOpAND>;
                let $scope$v: Nullable<ExpS6>;
                let $$res: Nullable<ExpS5Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$and = this.matchExpOpAND($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS6($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS5Sub, and: $scope$and, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExpS5($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS5> {
        return this.run<ExpS5>($$dpth,
            () => {
                let $scope$head: Nullable<ExpS6>;
                let $scope$tail: Nullable<ExpS5Sub[]>;
                let $$res: Nullable<ExpS5> = null;
                if (true
                    && ($scope$head = this.matchExpS6($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<ExpS5Sub>(() => this.matchExpS5Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS5, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS6Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS6Sub> {
        return this.run<ExpS6Sub>($$dpth,
            () => {
                let $scope$comparison: Nullable<ExpOpCompare>;
                let $scope$v: Nullable<ExpS7>;
                let $$res: Nullable<ExpS6Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$comparison = this.matchExpOpCompare($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS7($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS6Sub, comparison: $scope$comparison, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExpS6($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS6> {
        return this.run<ExpS6>($$dpth,
            () => {
                let $scope$head: Nullable<ExpS7>;
                let $scope$tail: Nullable<ExpS6Sub[]>;
                let $$res: Nullable<ExpS6> = null;
                if (true
                    && ($scope$head = this.matchExpS7($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<ExpS6Sub>(() => this.matchExpS6Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS6, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS7($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS7> {
        return this.run<ExpS7>($$dpth,
            () => {
                let $scope$feedback: Nullable<Nullable<ExpOp7>>;
                let $scope$tail: Nullable<ExpS8>;
                let $$res: Nullable<ExpS7> = null;
                if (true
                    && (($scope$feedback = this.matchExpOp7($$dpth + 1, $$cr)) || true)
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$tail = this.matchExpS8($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS7, feedback: $scope$feedback, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS8Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS8Sub> {
        return this.run<ExpS8Sub>($$dpth,
            () => {
                let $scope$add: Nullable<ExpOp8>;
                let $scope$v: Nullable<ExpS9>;
                let $$res: Nullable<ExpS8Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$add = this.matchExpOp8($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS9($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS8Sub, add: $scope$add, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExpS8($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS8> {
        return this.run<ExpS8>($$dpth,
            () => {
                let $scope$head: Nullable<ExpS9>;
                let $scope$tail: Nullable<ExpS8Sub[]>;
                let $$res: Nullable<ExpS8> = null;
                if (true
                    && ($scope$head = this.matchExpS9($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<ExpS8Sub>(() => this.matchExpS8Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS8, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS9Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS9Sub> {
        return this.run<ExpS9Sub>($$dpth,
            () => {
                let $scope$multi: Nullable<ExpOp9>;
                let $scope$v: Nullable<ExpS10>;
                let $$res: Nullable<ExpS9Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$multi = this.matchExpOp9($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS10($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS9Sub, multi: $scope$multi, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExpS9($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS9> {
        return this.run<ExpS9>($$dpth,
            () => {
                let $scope$head: Nullable<ExpS10>;
                let $scope$tail: Nullable<ExpS9Sub[]>;
                let $$res: Nullable<ExpS9> = null;
                if (true
                    && ($scope$head = this.matchExpS10($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<ExpS9Sub>(() => this.matchExpS9Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS9, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS10Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS10Sub> {
        return this.run<ExpS10Sub>($$dpth,
            () => {
                let $scope$inc: Nullable<ExpOp10>;
                let $scope$v: Nullable<ExpS11>;
                let $$res: Nullable<ExpS10Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$inc = this.matchExpOp10($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS11($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS10Sub, inc: $scope$inc, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExpS10($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS10> {
        return this.run<ExpS10>($$dpth,
            () => {
                let $scope$head: Nullable<ExpS11>;
                let $scope$tail: Nullable<ExpS10Sub[]>;
                let $$res: Nullable<ExpS10> = null;
                if (true
                    && ($scope$head = this.matchExpS11($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<ExpS10Sub>(() => this.matchExpS10Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS10, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExpS11($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS11> {
        return this.run<ExpS11>($$dpth,
            () => {
                let $scope$not: Nullable<Nullable<ExpOpNOT>>;
                let $scope$tail: Nullable<ExpS12>;
                let $$res: Nullable<ExpS11> = null;
                if (true
                    && (($scope$not = this.matchExpOpNOT($$dpth + 1, $$cr)) || true)
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$tail = this.matchExpS12($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS11, not: $scope$not, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchBracketIndexS($$dpth: number, $$cr?: ErrorTracker): Nullable<BracketIndexS> {
        return this.run<BracketIndexS>($$dpth,
            () => {
                let $scope$v: Nullable<ExpInStringSub>;
                let $$res: Nullable<BracketIndexS> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpInStringSub($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BracketIndexS, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchBracketCallS($$dpth: number, $$cr?: ErrorTracker): Nullable<BracketCallS> {
        return this.run<BracketCallS>($$dpth,
            () => {
                let $scope$v: Nullable<ExpInStringSub>;
                let $$res: Nullable<BracketCallS> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpInStringSub($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BracketCallS, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchWithBracketS($$dpth: number, $$cr?: ErrorTracker): Nullable<WithBracketS> {
        return this.choice<WithBracketS>([
            () => this.matchWithBracketS_1($$dpth + 1, $$cr),
            () => this.matchWithBracketS_2($$dpth + 1, $$cr),
        ]);
    }
    public matchWithBracketS_1($$dpth: number, $$cr?: ErrorTracker): Nullable<WithBracketS_1> {
        return this.run<WithBracketS_1>($$dpth,
            () => {
                let $scope$index: Nullable<BracketIndexS>;
                let $$res: Nullable<WithBracketS_1> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$index = this.matchBracketIndexS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.WithBracketS_1, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchWithBracketS_2($$dpth: number, $$cr?: ErrorTracker): Nullable<WithBracketS_2> {
        return this.run<WithBracketS_2>($$dpth,
            () => {
                let $scope$call: Nullable<BracketCallS>;
                let $$res: Nullable<WithBracketS_2> = null;
                if (true
                    && ($scope$call = this.matchBracketCallS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.WithBracketS_2, call: $scope$call};
                }
                return $$res;
            });
    }
    public matchString_Single_Bracket($$dpth: number, $$cr?: ErrorTracker): Nullable<String_Single_Bracket> {
        return this.run<String_Single_Bracket>($$dpth,
            () => {
                let $scope$v: Nullable<String_Single>;
                let $scope$index: Nullable<BracketIndexS[]>;
                let $$res: Nullable<String_Single_Bracket> = null;
                if (true
                    && ($scope$v = this.matchString_Single($$dpth + 1, $$cr)) !== null
                    && ($scope$index = this.loop<BracketIndexS>(() => this.matchBracketIndexS($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.String_Single_Bracket, v: $scope$v, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchLocalVariableWithBracketS($$dpth: number, $$cr?: ErrorTracker): Nullable<LocalVariableWithBracketS> {
        return this.run<LocalVariableWithBracketS>($$dpth,
            () => {
                let $scope$v: Nullable<LocalVariable>;
                let $scope$index: Nullable<BracketIndexS[]>;
                let $$res: Nullable<LocalVariableWithBracketS> = null;
                if (true
                    && ($scope$v = this.matchLocalVariable($$dpth + 1, $$cr)) !== null
                    && ($scope$index = this.loop<BracketIndexS>(() => this.matchBracketIndexS($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.LocalVariableWithBracketS, v: $scope$v, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchGlobalVariableWithBracketS($$dpth: number, $$cr?: ErrorTracker): Nullable<GlobalVariableWithBracketS> {
        return this.run<GlobalVariableWithBracketS>($$dpth,
            () => {
                let $scope$v: Nullable<GlobalVariable>;
                let $scope$append: Nullable<WithBracketS[]>;
                let $$res: Nullable<GlobalVariableWithBracketS> = null;
                if (true
                    && ($scope$v = this.matchGlobalVariable($$dpth + 1, $$cr)) !== null
                    && ($scope$append = this.loop<WithBracketS>(() => this.matchWithBracketS($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.GlobalVariableWithBracketS, v: $scope$v, append: $scope$append};
                }
                return $$res;
            });
    }
    public matchBracketExpS($$dpth: number, $$cr?: ErrorTracker): Nullable<BracketExpS> {
        return this.run<BracketExpS>($$dpth,
            () => {
                let $scope$v: Nullable<ExpS1>;
                let $scope$index: Nullable<BracketIndexS[]>;
                let $$res: Nullable<BracketExpS> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpS1($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && ($scope$index = this.loop<BracketIndexS>(() => this.matchBracketIndexS($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.BracketExpS, v: $scope$v, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchExpS12($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS12> {
        return this.choice<ExpS12>([
            () => this.matchExpS12_1($$dpth + 1, $$cr),
            () => this.matchExpS12_2($$dpth + 1, $$cr),
            () => this.matchExpS12_3($$dpth + 1, $$cr),
            () => this.matchExpS12_4($$dpth + 1, $$cr),
            () => this.matchExpS12_5($$dpth + 1, $$cr),
        ]);
    }
    public matchExpS12_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS12_1> {
        return this.run<ExpS12_1>($$dpth,
            () => {
                let $scope$local: Nullable<LocalVariableWithBracketS>;
                let $$res: Nullable<ExpS12_1> = null;
                if (true
                    && ($scope$local = this.matchLocalVariableWithBracketS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS12_1, local: $scope$local};
                }
                return $$res;
            });
    }
    public matchExpS12_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS12_2> {
        return this.run<ExpS12_2>($$dpth,
            () => {
                let $scope$global: Nullable<GlobalVariableWithBracketS>;
                let $$res: Nullable<ExpS12_2> = null;
                if (true
                    && ($scope$global = this.matchGlobalVariableWithBracketS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS12_2, global: $scope$global};
                }
                return $$res;
            });
    }
    public matchExpS12_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS12_3> {
        return this.run<ExpS12_3>($$dpth,
            () => {
                let $scope$num: Nullable<Number>;
                let $$res: Nullable<ExpS12_3> = null;
                if (true
                    && ($scope$num = this.matchNumber($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS12_3, num: $scope$num};
                }
                return $$res;
            });
    }
    public matchExpS12_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS12_4> {
        return this.run<ExpS12_4>($$dpth,
            () => {
                let $scope$str: Nullable<String_Single_Bracket>;
                let $$res: Nullable<ExpS12_4> = null;
                if (true
                    && ($scope$str = this.matchString_Single_Bracket($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS12_4, str: $scope$str};
                }
                return $$res;
            });
    }
    public matchExpS12_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpS12_5> {
        return this.run<ExpS12_5>($$dpth,
            () => {
                let $scope$bracket: Nullable<BracketExpS>;
                let $$res: Nullable<ExpS12_5> = null;
                if (true
                    && ($scope$bracket = this.matchBracketExpS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpS12_5, bracket: $scope$bracket};
                }
                return $$res;
            });
    }
    public matchExpInStringSub($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpInStringSub> {
        return this.matchExpS1($$dpth + 1, $$cr);
    }
    public matchExpInString($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpInString> {
        return this.run<ExpInString>($$dpth,
            () => {
                let $scope$v: Nullable<ExpInStringSub>;
                let $$res: Nullable<ExpInString> = null;
                if (true
                    && this.regexAccept(String.raw`(?:%\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpInStringSub($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpInString, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchCharInString($$dpth: number, $$cr?: ErrorTracker): Nullable<CharInString> {
        return this.run<CharInString>($$dpth,
            () => {
                let $scope$ch: Nullable<Char>;
                let $$res: Nullable<CharInString> = null;
                if (true
                    && this.negate(() => this.matchCharInString_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$ch = this.matchChar($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CharInString, ch: $scope$ch};
                }
                return $$res;
            });
    }
    public matchCharInString_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CharInString_$0> {
        return this.choice<CharInString_$0>([
            () => this.matchCharInString_$0_1($$dpth + 1, $$cr),
            () => this.matchCharInString_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchCharInString_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CharInString_$0_1> {
        return this.regexAccept(String.raw`(?:%\()`, $$dpth + 1, $$cr);
    }
    public matchCharInString_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CharInString_$0_2> {
        return this.matchStringSepDouble($$dpth + 1, $$cr);
    }
    public matchStringDoubleSub($$dpth: number, $$cr?: ErrorTracker): Nullable<StringDoubleSub> {
        return this.choice<StringDoubleSub>([
            () => this.matchStringDoubleSub_1($$dpth + 1, $$cr),
            () => this.matchStringDoubleSub_2($$dpth + 1, $$cr),
            () => this.matchStringDoubleSub_3($$dpth + 1, $$cr),
        ]);
    }
    public matchStringDoubleSub_1($$dpth: number, $$cr?: ErrorTracker): Nullable<StringDoubleSub_1> {
        return this.run<StringDoubleSub_1>($$dpth,
            () => {
                let $scope$exp: Nullable<ExpInString>;
                let $$res: Nullable<StringDoubleSub_1> = null;
                if (true
                    && ($scope$exp = this.matchExpInString($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringDoubleSub_1, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchStringDoubleSub_2($$dpth: number, $$cr?: ErrorTracker): Nullable<StringDoubleSub_2> {
        return this.run<StringDoubleSub_2>($$dpth,
            () => {
                let $scope$nl: Nullable<StringNL>;
                let $$res: Nullable<StringDoubleSub_2> = null;
                if (true
                    && ($scope$nl = this.matchStringNL($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringDoubleSub_2, nl: $scope$nl};
                }
                return $$res;
            });
    }
    public matchStringDoubleSub_3($$dpth: number, $$cr?: ErrorTracker): Nullable<StringDoubleSub_3> {
        return this.run<StringDoubleSub_3>($$dpth,
            () => {
                let $scope$ch: Nullable<CharInString>;
                let $$res: Nullable<StringDoubleSub_3> = null;
                if (true
                    && ($scope$ch = this.matchCharInString($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringDoubleSub_3, ch: $scope$ch};
                }
                return $$res;
            });
    }
    public matchStringSingleDouble($$dpth: number, $$cr?: ErrorTracker): Nullable<StringSingleDouble> {
        return this.run<StringSingleDouble>($$dpth,
            () => {
                let $scope$v: Nullable<StringDoubleSub[]>;
                let $$res: Nullable<StringSingleDouble> = null;
                if (true
                    && this.matchStringSepDouble($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.loop<StringDoubleSub>(() => this.matchStringDoubleSub($$dpth + 1, $$cr), true)) !== null
                    && this.matchStringSepDouble($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.StringSingleDouble, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchStringSingle($$dpth: number, $$cr?: ErrorTracker): Nullable<StringSingle> {
        return this.choice<StringSingle>([
            () => this.matchStringSingle_1($$dpth + 1, $$cr),
            () => this.matchStringSingle_2($$dpth + 1, $$cr),
        ]);
    }
    public matchStringSingle_1($$dpth: number, $$cr?: ErrorTracker): Nullable<StringSingle_1> {
        return this.run<StringSingle_1>($$dpth,
            () => {
                let $scope$single: Nullable<StringSingleSingle>;
                let $$res: Nullable<StringSingle_1> = null;
                if (true
                    && ($scope$single = this.matchStringSingleSingle($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringSingle_1, single: $scope$single};
                }
                return $$res;
            });
    }
    public matchStringSingle_2($$dpth: number, $$cr?: ErrorTracker): Nullable<StringSingle_2> {
        return this.run<StringSingle_2>($$dpth,
            () => {
                let $scope$double: Nullable<StringSingleDouble>;
                let $$res: Nullable<StringSingle_2> = null;
                if (true
                    && ($scope$double = this.matchStringSingleDouble($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringSingle_2, double: $scope$double};
                }
                return $$res;
            });
    }
    public matchExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<Expression> {
        return this.matchExp1($$dpth + 1, $$cr);
    }
    public matchExp1Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp1Sub> {
        return this.run<Exp1Sub>($$dpth,
            () => {
                let $scope$enum: Nullable<ExpOpComma>;
                let $scope$v: Nullable<Exp2>;
                let $$res: Nullable<Exp1Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$enum = this.matchExpOpComma($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp1Sub, enum: $scope$enum, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExp1($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp1> {
        return this.run<Exp1>($$dpth,
            () => {
                let $scope$head: Nullable<Exp2>;
                let $scope$tail: Nullable<Exp1Sub[]>;
                let $$res: Nullable<Exp1> = null;
                if (true
                    && ($scope$head = this.matchExp2($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<Exp1Sub>(() => this.matchExp1Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp1, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp2Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp2Sub> {
        return this.run<Exp2Sub>($$dpth,
            () => {
                let $scope$op_assign: Nullable<ExpOpOtherSet>;
                let $scope$v: Nullable<Exp3>;
                let $$res: Nullable<Exp2Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$op_assign = this.matchExpOpOtherSet($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp2Sub, op_assign: $scope$op_assign, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExp2($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp2> {
        return this.run<Exp2>($$dpth,
            () => {
                let $scope$head: Nullable<Exp3>;
                let $scope$tail: Nullable<Exp2Sub[]>;
                let $$res: Nullable<Exp2> = null;
                if (true
                    && ($scope$head = this.matchExp3($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<Exp2Sub>(() => this.matchExp2Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp2, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp3Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp3Sub> {
        return this.run<Exp3Sub>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$assign: Nullable<ExpOpSet>;
                let $scope$v: Nullable<Exp4>;
                let $$res: Nullable<Exp3Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                    && ($scope$assign = this.matchExpOpSet($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp4($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp3Sub, pos: $scope$pos, assign: $scope$assign, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExp3($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp3> {
        return this.run<Exp3>($$dpth,
            () => {
                let $scope$head: Nullable<Exp4>;
                let $scope$tail: Nullable<Exp3Sub[]>;
                let $$res: Nullable<Exp3> = null;
                if (true
                    && ($scope$head = this.matchExp4($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<Exp3Sub>(() => this.matchExp3Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp3, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp4Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp4Sub> {
        return this.run<Exp4Sub>($$dpth,
            () => {
                let $scope$or: Nullable<ExpOpOR>;
                let $scope$v: Nullable<Exp5>;
                let $$res: Nullable<Exp4Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$or = this.matchExpOpOR($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp5($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp4Sub, or: $scope$or, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExp4($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp4> {
        return this.run<Exp4>($$dpth,
            () => {
                let $scope$head: Nullable<Exp5>;
                let $scope$tail: Nullable<Exp4Sub[]>;
                let $$res: Nullable<Exp4> = null;
                if (true
                    && ($scope$head = this.matchExp5($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<Exp4Sub>(() => this.matchExp4Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp4, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp5Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp5Sub> {
        return this.run<Exp5Sub>($$dpth,
            () => {
                let $scope$and: Nullable<ExpOpAND>;
                let $scope$v: Nullable<Exp6>;
                let $$res: Nullable<Exp5Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$and = this.matchExpOpAND($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp6($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp5Sub, and: $scope$and, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExp5($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp5> {
        return this.run<Exp5>($$dpth,
            () => {
                let $scope$head: Nullable<Exp6>;
                let $scope$tail: Nullable<Exp5Sub[]>;
                let $$res: Nullable<Exp5> = null;
                if (true
                    && ($scope$head = this.matchExp6($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<Exp5Sub>(() => this.matchExp5Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp5, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp6Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp6Sub> {
        return this.run<Exp6Sub>($$dpth,
            () => {
                let $scope$comparison: Nullable<ExpOpCompare>;
                let $scope$v: Nullable<Exp7>;
                let $$res: Nullable<Exp6Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$comparison = this.matchExpOpCompare($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp7($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp6Sub, comparison: $scope$comparison, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExp6($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp6> {
        return this.run<Exp6>($$dpth,
            () => {
                let $scope$head: Nullable<Exp7>;
                let $scope$tail: Nullable<Exp6Sub[]>;
                let $$res: Nullable<Exp6> = null;
                if (true
                    && ($scope$head = this.matchExp7($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<Exp6Sub>(() => this.matchExp6Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp6, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp7($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp7> {
        return this.run<Exp7>($$dpth,
            () => {
                let $scope$feedback: Nullable<Nullable<ExpOp7>>;
                let $scope$tail: Nullable<Exp8>;
                let $$res: Nullable<Exp7> = null;
                if (true
                    && (($scope$feedback = this.matchExpOp7($$dpth + 1, $$cr)) || true)
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$tail = this.matchExp8($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp7, feedback: $scope$feedback, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp8Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp8Sub> {
        return this.run<Exp8Sub>($$dpth,
            () => {
                let $scope$add: Nullable<ExpOp8>;
                let $scope$v: Nullable<Exp9>;
                let $$res: Nullable<Exp8Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$add = this.matchExpOp8($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp9($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp8Sub, add: $scope$add, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExp8($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp8> {
        return this.run<Exp8>($$dpth,
            () => {
                let $scope$head: Nullable<Exp9>;
                let $scope$tail: Nullable<Exp8Sub[]>;
                let $$res: Nullable<Exp8> = null;
                if (true
                    && ($scope$head = this.matchExp9($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<Exp8Sub>(() => this.matchExp8Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp8, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp9Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp9Sub> {
        return this.run<Exp9Sub>($$dpth,
            () => {
                let $scope$multi: Nullable<ExpOp9>;
                let $scope$v: Nullable<Exp10>;
                let $$res: Nullable<Exp9Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$multi = this.matchExpOp9($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp10($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp9Sub, multi: $scope$multi, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExp9($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp9> {
        return this.run<Exp9>($$dpth,
            () => {
                let $scope$head: Nullable<Exp10>;
                let $scope$tail: Nullable<Exp9Sub[]>;
                let $$res: Nullable<Exp9> = null;
                if (true
                    && ($scope$head = this.matchExp10($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<Exp9Sub>(() => this.matchExp9Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp9, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp10Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp10Sub> {
        return this.run<Exp10Sub>($$dpth,
            () => {
                let $scope$inc: Nullable<ExpOp10>;
                let $scope$v: Nullable<Exp11>;
                let $$res: Nullable<Exp10Sub> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$inc = this.matchExpOp10($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp11($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp10Sub, inc: $scope$inc, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchExp10($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp10> {
        return this.run<Exp10>($$dpth,
            () => {
                let $scope$head: Nullable<Exp11>;
                let $scope$tail: Nullable<Exp10Sub[]>;
                let $$res: Nullable<Exp10> = null;
                if (true
                    && ($scope$head = this.matchExp11($$dpth + 1, $$cr)) !== null
                    && ($scope$tail = this.loop<Exp10Sub>(() => this.matchExp10Sub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp10, head: $scope$head, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchExp11($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp11> {
        return this.run<Exp11>($$dpth,
            () => {
                let $scope$not: Nullable<Nullable<ExpOpNOT>>;
                let $scope$tail: Nullable<Exp12>;
                let $$res: Nullable<Exp11> = null;
                if (true
                    && (($scope$not = this.matchExpOpNOT($$dpth + 1, $$cr)) || true)
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$tail = this.matchExp12($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp11, not: $scope$not, tail: $scope$tail};
                }
                return $$res;
            });
    }
    public matchBracketIndex($$dpth: number, $$cr?: ErrorTracker): Nullable<BracketIndex> {
        return this.run<BracketIndex>($$dpth,
            () => {
                let $scope$v: Nullable<Expression>;
                let $$res: Nullable<BracketIndex> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BracketIndex, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchBracketCall($$dpth: number, $$cr?: ErrorTracker): Nullable<BracketCall> {
        return this.run<BracketCall>($$dpth,
            () => {
                let $scope$v: Nullable<Expression>;
                let $$res: Nullable<BracketCall> = null;
                if (true
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BracketCall, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchWithBracket($$dpth: number, $$cr?: ErrorTracker): Nullable<WithBracket> {
        return this.choice<WithBracket>([
            () => this.matchWithBracket_1($$dpth + 1, $$cr),
            () => this.matchWithBracket_2($$dpth + 1, $$cr),
        ]);
    }
    public matchWithBracket_1($$dpth: number, $$cr?: ErrorTracker): Nullable<WithBracket_1> {
        return this.run<WithBracket_1>($$dpth,
            () => {
                let $scope$index: Nullable<BracketIndex>;
                let $$res: Nullable<WithBracket_1> = null;
                if (true
                    && ($scope$index = this.matchBracketIndex($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.WithBracket_1, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchWithBracket_2($$dpth: number, $$cr?: ErrorTracker): Nullable<WithBracket_2> {
        return this.run<WithBracket_2>($$dpth,
            () => {
                let $scope$call: Nullable<BracketCall>;
                let $$res: Nullable<WithBracket_2> = null;
                if (true
                    && ($scope$call = this.matchBracketCall($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.WithBracket_2, call: $scope$call};
                }
                return $$res;
            });
    }
    public matchBracketExp($$dpth: number, $$cr?: ErrorTracker): Nullable<BracketExp> {
        return this.run<BracketExp>($$dpth,
            () => {
                let $scope$v: Nullable<Exp1>;
                let $scope$index: Nullable<BracketIndex[]>;
                let $$res: Nullable<BracketExp> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExp1($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && ($scope$index = this.loop<BracketIndex>(() => this.matchBracketIndex($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.BracketExp, v: $scope$v, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchLocalVariableWithBracket($$dpth: number, $$cr?: ErrorTracker): Nullable<LocalVariableWithBracket> {
        return this.run<LocalVariableWithBracket>($$dpth,
            () => {
                let $scope$v: Nullable<LocalVariable>;
                let $scope$index: Nullable<BracketIndex[]>;
                let $$res: Nullable<LocalVariableWithBracket> = null;
                if (true
                    && ($scope$v = this.matchLocalVariable($$dpth + 1, $$cr)) !== null
                    && ($scope$index = this.loop<BracketIndex>(() => this.matchBracketIndex($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.LocalVariableWithBracket, v: $scope$v, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchGlobalVariableWithBracket($$dpth: number, $$cr?: ErrorTracker): Nullable<GlobalVariableWithBracket> {
        return this.run<GlobalVariableWithBracket>($$dpth,
            () => {
                let $scope$v: Nullable<GlobalVariable>;
                let $scope$append: Nullable<WithBracket[]>;
                let $$res: Nullable<GlobalVariableWithBracket> = null;
                if (true
                    && ($scope$v = this.matchGlobalVariable($$dpth + 1, $$cr)) !== null
                    && ($scope$append = this.loop<WithBracket>(() => this.matchWithBracket($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.GlobalVariableWithBracket, v: $scope$v, append: $scope$append};
                }
                return $$res;
            });
    }
    public matchExp12($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp12> {
        return this.choice<Exp12>([
            () => this.matchExp12_1($$dpth + 1, $$cr),
            () => this.matchExp12_2($$dpth + 1, $$cr),
            () => this.matchExp12_3($$dpth + 1, $$cr),
            () => this.matchExp12_4($$dpth + 1, $$cr),
            () => this.matchExp12_5($$dpth + 1, $$cr),
        ]);
    }
    public matchExp12_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp12_1> {
        return this.run<Exp12_1>($$dpth,
            () => {
                let $scope$local: Nullable<LocalVariableWithBracket>;
                let $$res: Nullable<Exp12_1> = null;
                if (true
                    && ($scope$local = this.matchLocalVariableWithBracket($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp12_1, local: $scope$local};
                }
                return $$res;
            });
    }
    public matchExp12_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp12_2> {
        return this.run<Exp12_2>($$dpth,
            () => {
                let $scope$global: Nullable<GlobalVariableWithBracket>;
                let $$res: Nullable<Exp12_2> = null;
                if (true
                    && ($scope$global = this.matchGlobalVariableWithBracket($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp12_2, global: $scope$global};
                }
                return $$res;
            });
    }
    public matchExp12_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp12_3> {
        return this.run<Exp12_3>($$dpth,
            () => {
                let $scope$num: Nullable<Number>;
                let $$res: Nullable<Exp12_3> = null;
                if (true
                    && ($scope$num = this.matchNumber($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp12_3, num: $scope$num};
                }
                return $$res;
            });
    }
    public matchExp12_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp12_4> {
        return this.run<Exp12_4>($$dpth,
            () => {
                let $scope$str: Nullable<StringV>;
                let $$res: Nullable<Exp12_4> = null;
                if (true
                    && ($scope$str = this.matchStringV($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp12_4, str: $scope$str};
                }
                return $$res;
            });
    }
    public matchExp12_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Exp12_5> {
        return this.run<Exp12_5>($$dpth,
            () => {
                let $scope$bracket: Nullable<BracketExp>;
                let $$res: Nullable<Exp12_5> = null;
                if (true
                    && ($scope$bracket = this.matchBracketExp($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Exp12_5, bracket: $scope$bracket};
                }
                return $$res;
            });
    }
    public matchStringV($$dpth: number, $$cr?: ErrorTracker): Nullable<StringV> {
        return this.choice<StringV>([
            () => this.matchStringV_1($$dpth + 1, $$cr),
            () => this.matchStringV_2($$dpth + 1, $$cr),
        ]);
    }
    public matchStringV_1($$dpth: number, $$cr?: ErrorTracker): Nullable<StringV_1> {
        return this.run<StringV_1>($$dpth,
            () => {
                let $scope$single: Nullable<StringSingle>;
                let $$res: Nullable<StringV_1> = null;
                if (true
                    && ($scope$single = this.matchStringSingle($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringV_1, single: $scope$single};
                }
                return $$res;
            });
    }
    public matchStringV_2($$dpth: number, $$cr?: ErrorTracker): Nullable<StringV_2> {
        return this.run<StringV_2>($$dpth,
            () => {
                let $scope$multi: Nullable<StringMulti>;
                let $$res: Nullable<StringV_2> = null;
                if (true
                    && ($scope$multi = this.matchStringMulti($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringV_2, multi: $scope$multi};
                }
                return $$res;
            });
    }
    public matchString($$dpth: number, $$cr?: ErrorTracker): Nullable<String> {
        return this.matchStringV($$dpth + 1, $$cr);
    }
    public matchStringMulti($$dpth: number, $$cr?: ErrorTracker): Nullable<StringMulti> {
        return this.choice<StringMulti>([
            () => this.matchStringMulti_1($$dpth + 1, $$cr),
            () => this.matchStringMulti_2($$dpth + 1, $$cr),
        ]);
    }
    public matchStringMulti_1($$dpth: number, $$cr?: ErrorTracker): Nullable<StringMulti_1> {
        return this.run<StringMulti_1>($$dpth,
            () => {
                let $scope$single: Nullable<StringMultiSingle>;
                let $$res: Nullable<StringMulti_1> = null;
                if (true
                    && ($scope$single = this.matchStringMultiSingle($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringMulti_1, single: $scope$single};
                }
                return $$res;
            });
    }
    public matchStringMulti_2($$dpth: number, $$cr?: ErrorTracker): Nullable<StringMulti_2> {
        return this.run<StringMulti_2>($$dpth,
            () => {
                let $scope$double: Nullable<StringMultiDouble>;
                let $$res: Nullable<StringMulti_2> = null;
                if (true
                    && ($scope$double = this.matchStringMultiDouble($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.StringMulti_2, double: $scope$double};
                }
                return $$res;
            });
    }
    public matchExpInStr($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpInStr> {
        return this.run<ExpInStr>($$dpth,
            () => {
                let $scope$v: Nullable<Expression>;
                let $$res: Nullable<ExpInStr> = null;
                if (true
                    && this.regexAccept(String.raw`(?:%\()`, $$dpth + 1, $$cr) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.matchExpSep($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpInStr, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchStringMultiDouble($$dpth: number, $$cr?: ErrorTracker): Nullable<StringMultiDouble> {
        return this.run<StringMultiDouble>($$dpth,
            () => {
                let $scope$v: Nullable<StringDoubleSub[]>;
                let $$res: Nullable<StringMultiDouble> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<<)`, $$dpth + 1, $$cr) !== null
                    && this.matchStringSepDouble($$dpth + 1, $$cr) !== null
                    && ($scope$v = this.loop<StringDoubleSub>(() => this.matchStringDoubleSub($$dpth + 1, $$cr), true)) !== null
                    && this.matchStringSepDouble($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:>>)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.StringMultiDouble, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchAlternativeSub($$dpth: number, $$cr?: ErrorTracker): Nullable<AlternativeSub> {
        return this.choice<AlternativeSub>([
            () => this.matchAlternativeSub_1($$dpth + 1, $$cr),
            () => this.matchAlternativeSub_2($$dpth + 1, $$cr),
            () => this.matchAlternativeSub_3($$dpth + 1, $$cr),
            () => this.matchAlternativeSub_4($$dpth + 1, $$cr),
        ]);
    }
    public matchAlternativeSub_1($$dpth: number, $$cr?: ErrorTracker): Nullable<AlternativeSub_1> {
        return this.regexAccept(String.raw`(?:random)`, $$dpth + 1, $$cr);
    }
    public matchAlternativeSub_2($$dpth: number, $$cr?: ErrorTracker): Nullable<AlternativeSub_2> {
        return this.regexAccept(String.raw`(?:nonoverlap)`, $$dpth + 1, $$cr);
    }
    public matchAlternativeSub_3($$dpth: number, $$cr?: ErrorTracker): Nullable<AlternativeSub_3> {
        return this.regexAccept(String.raw`(?:sequential)`, $$dpth + 1, $$cr);
    }
    public matchAlternativeSub_4($$dpth: number, $$cr?: ErrorTracker): Nullable<AlternativeSub_4> {
        return this.regexAccept(String.raw`(?:array)`, $$dpth + 1, $$cr);
    }
    public matchAlternativeParallel($$dpth: number, $$cr?: ErrorTracker): Nullable<AlternativeParallel> {
        return this.choice<AlternativeParallel>([
            () => this.matchAlternativeParallel_1($$dpth + 1, $$cr),
            () => this.matchAlternativeParallel_2($$dpth + 1, $$cr),
        ]);
    }
    public matchAlternativeParallel_1($$dpth: number, $$cr?: ErrorTracker): Nullable<AlternativeParallel_1> {
        return this.regexAccept(String.raw`(?:parallel)`, $$dpth + 1, $$cr);
    }
    public matchAlternativeParallel_2($$dpth: number, $$cr?: ErrorTracker): Nullable<AlternativeParallel_2> {
        return this.regexAccept(String.raw`(?:void)`, $$dpth + 1, $$cr);
    }
    public matchAlternative($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative> {
        return this.choice<Alternative>([
            () => this.matchAlternative_1($$dpth + 1, $$cr),
            () => this.matchAlternative_2($$dpth + 1, $$cr),
            () => this.matchAlternative_3($$dpth + 1, $$cr),
            () => this.matchAlternative_4($$dpth + 1, $$cr),
            () => this.matchAlternative_5($$dpth + 1, $$cr),
            () => this.matchAlternative_6($$dpth + 1, $$cr),
            () => this.matchAlternative_7($$dpth + 1, $$cr),
        ]);
    }
    public matchAlternative_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative_1> {
        return this.regexAccept(String.raw`(?:void)`, $$dpth + 1, $$cr);
    }
    public matchAlternative_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative_2> {
        return this.regexAccept(String.raw`(?:pool)`, $$dpth + 1, $$cr);
    }
    public matchAlternative_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative_3> {
        return this.regexAccept(String.raw`(?:all)`, $$dpth + 1, $$cr);
    }
    public matchAlternative_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative_4> {
        return this.regexAccept(String.raw`(?:last)`, $$dpth + 1, $$cr);
    }
    public matchAlternative_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative_5> {
        return this.matchAlternativeSub($$dpth + 1, $$cr);
    }
    public matchAlternative_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative_6> {
        return this.matchAlternative_$0($$dpth + 1, $$cr);
    }
    public matchAlternative_7($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative_7> {
        return this.matchAlternative_$1($$dpth + 1, $$cr);
    }
    public matchAlternative_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative_$0> {
        return this.run<Alternative_$0>($$dpth,
            () => {
                let $$res: Nullable<Alternative_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:melt_)`, $$dpth + 1, $$cr) !== null
                    && this.matchAlternativeSub($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Alternative_$0, };
                }
                return $$res;
            });
    }
    public matchAlternative_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<Alternative_$1> {
        return this.run<Alternative_$1>($$dpth,
            () => {
                let $$res: Nullable<Alternative_$1> = null;
                if (true
                    && this.matchAlternativeSub($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:_pool)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Alternative_$1, };
                }
                return $$res;
            });
    }
    public matchAlternativeSep($$dpth: number, $$cr?: ErrorTracker): Nullable<AlternativeSep> {
        return this.run<AlternativeSep>($$dpth,
            () => {
                let $scope$comment: Nullable<Sep>;
                let $$res: Nullable<AlternativeSep> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:--)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$comment = this.matchSep($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.AlternativeSep, comment: $scope$comment};
                }
                return $$res;
            });
    }
    public matchForConditionSep($$dpth: number, $$cr?: ErrorTracker): Nullable<ForConditionSep> {
        return this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr);
    }
    public matchForCondition($$dpth: number, $$cr?: ErrorTracker): Nullable<ForCondition> {
        return this.run<ForCondition>($$dpth,
            () => {
                let $scope$init: Nullable<Expression>;
                let $scope$condition: Nullable<Expression>;
                let $scope$next: Nullable<Expression>;
                let $$res: Nullable<ForCondition> = null;
                if (true
                    && ($scope$init = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.loop<ForCondition_$0>(() => this.matchForCondition_$0($$dpth + 1, $$cr), false) !== null
                    && ($scope$condition = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.loop<ForCondition_$1>(() => this.matchForCondition_$1($$dpth + 1, $$cr), false) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$next = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ForCondition, init: $scope$init, condition: $scope$condition, next: $scope$next};
                }
                return $$res;
            });
    }
    public matchForCondition_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ForCondition_$0> {
        return this.run<ForCondition_$0>($$dpth,
            () => {
                let $$res: Nullable<ForCondition_$0> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.matchForConditionSep($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ForCondition_$0, };
                }
                return $$res;
            });
    }
    public matchForCondition_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<ForCondition_$1> {
        return this.run<ForCondition_$1>($$dpth,
            () => {
                let $$res: Nullable<ForCondition_$1> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.matchForConditionSep($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ForCondition_$1, };
                }
                return $$res;
            });
    }
    public matchForeachCondition($$dpth: number, $$cr?: ErrorTracker): Nullable<ForeachCondition> {
        return this.run<ForeachCondition>($$dpth,
            () => {
                let $scope$array: Nullable<Expression>;
                let $scope$var: Nullable<Variable>;
                let $$res: Nullable<ForeachCondition> = null;
                if (true
                    && ($scope$array = this.matchExpression($$dpth + 1, $$cr)) !== null
                    && this.loop<ForeachCondition_$0>(() => this.matchForeachCondition_$0($$dpth + 1, $$cr), false) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$var = this.matchVariable($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ForeachCondition, array: $scope$array, var: $scope$var};
                }
                return $$res;
            });
    }
    public matchForeachCondition_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ForeachCondition_$0> {
        return this.run<ForeachCondition_$0>($$dpth,
            () => {
                let $$res: Nullable<ForeachCondition_$0> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.matchForConditionSep($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ForeachCondition_$0, };
                }
                return $$res;
            });
    }
    public matchLabel($$dpth: number, $$cr?: ErrorTracker): Nullable<Label> {
        return this.choice<Label>([
            () => this.matchLabel_1($$dpth + 1, $$cr),
            () => this.matchLabel_2($$dpth + 1, $$cr),
        ]);
    }
    public matchLabel_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Label_1> {
        return this.run<Label_1>($$dpth,
            () => {
                let $scope$str: Nullable<String>;
                let $$res: Nullable<Label_1> = null;
                if (true
                    && ($scope$str = this.matchString($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Label_1, str: $scope$str};
                }
                return $$res;
            });
    }
    public matchLabel_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Label_2> {
        return this.run<Label_2>($$dpth,
            () => {
                let $scope$num: Nullable<Number>;
                let $$res: Nullable<Label_2> = null;
                if (true
                    && ($scope$num = this.matchNumber($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Label_2, num: $scope$num};
                }
                return $$res;
            });
    }
    public matchWhenConditionSub($$dpth: number, $$cr?: ErrorTracker): Nullable<WhenConditionSub> {
        return this.run<WhenConditionSub>($$dpth,
            () => {
                let $scope$name: Nullable<Label>;
                let $$res: Nullable<WhenConditionSub> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.matchWhenConditionSub_$0($$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$name = this.matchLabel($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.WhenConditionSub, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchWhenConditionSub_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<WhenConditionSub_$0> {
        return this.choice<WhenConditionSub_$0>([
            () => this.matchWhenConditionSub_$0_1($$dpth + 1, $$cr),
            () => this.matchWhenConditionSub_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchWhenConditionSub_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<WhenConditionSub_$0_1> {
        return this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr);
    }
    public matchWhenConditionSub_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<WhenConditionSub_$0_2> {
        return this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr);
    }
    public matchWhenCondition($$dpth: number, $$cr?: ErrorTracker): Nullable<WhenCondition> {
        return this.run<WhenCondition>($$dpth,
            () => {
                let $scope$name: Nullable<Label>;
                let $scope$names: Nullable<WhenConditionSub[]>;
                let $$res: Nullable<WhenCondition> = null;
                if (true
                    && ($scope$name = this.matchLabel($$dpth + 1, $$cr)) !== null
                    && ($scope$names = this.loop<WhenConditionSub>(() => this.matchWhenConditionSub($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.WhenCondition, name: $scope$name, names: $scope$names};
                }
                return $$res;
            });
    }
    public matchOneLineExpression($$dpth: number, $$cr?: ErrorTracker): Nullable<OneLineExpression> {
        return this.matchScopeInner($$dpth + 1, $$cr);
    }
    public matchScopeBegin($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeBegin> {
        return this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr);
    }
    public matchScopeEnd($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeEnd> {
        return this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr);
    }
    public matchExpressionInBracket($$dpth: number, $$cr?: ErrorTracker): Nullable<ExpressionInBracket> {
        return this.run<ExpressionInBracket>($$dpth,
            () => {
                let $$res: Nullable<ExpressionInBracket> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.matchExpression($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ExpressionInBracket, };
                }
                return $$res;
            });
    }
    public matchCondition($$dpth: number, $$cr?: ErrorTracker): Nullable<Condition> {
        return this.choice<Condition>([
            () => this.matchCondition_1($$dpth + 1, $$cr),
            () => this.matchCondition_2($$dpth + 1, $$cr),
        ]);
    }
    public matchCondition_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Condition_1> {
        return this.run<Condition_1>($$dpth,
            () => {
                let $scope$exp: Nullable<Expression>;
                let $$res: Nullable<Condition_1> = null;
                if (true
                    && ($scope$exp = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Condition_1, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchCondition_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Condition_2> {
        return this.run<Condition_2>($$dpth,
            () => {
                let $scope$bracket: Nullable<ExpressionInBracket>;
                let $$res: Nullable<Condition_2> = null;
                if (true
                    && ($scope$bracket = this.matchExpressionInBracket($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Condition_2, bracket: $scope$bracket};
                }
                return $$res;
            });
    }
    public matchScopeInClauseSub($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInClauseSub> {
        return this.run<ScopeInClauseSub>($$dpth,
            () => {
                let $scope$exp: Nullable<OneLineExpression>;
                let $$res: Nullable<ScopeInClauseSub> = null;
                if (true
                    && this.loop<ScopeInClauseSub_$0>(() => this.matchScopeInClauseSub_$0($$dpth + 1, $$cr), false) !== null
                    && ($scope$exp = this.matchOneLineExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInClauseSub, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchScopeInClauseSub_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInClauseSub_$0> {
        return this.choice<ScopeInClauseSub_$0>([
            () => this.matchScopeInClauseSub_$0_1($$dpth + 1, $$cr),
            () => this.matchScopeInClauseSub_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeInClauseSub_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInClauseSub_$0_1> {
        return this.matchSepEx($$dpth + 1, $$cr);
    }
    public matchScopeInClauseSub_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInClauseSub_$0_2> {
        return this.matchSep2($$dpth + 1, $$cr);
    }
    public matchScopeInClause($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInClause> {
        return this.choice<ScopeInClause>([
            () => this.matchScopeInClause_1($$dpth + 1, $$cr),
            () => this.matchScopeInClause_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeInClause_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInClause_1> {
        return this.run<ScopeInClause_1>($$dpth,
            () => {
                let $scope$one: Nullable<ScopeInClauseSub>;
                let $$res: Nullable<ScopeInClause_1> = null;
                if (true
                    && ($scope$one = this.matchScopeInClauseSub($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInClause_1, one: $scope$one};
                }
                return $$res;
            });
    }
    public matchScopeInClause_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInClause_2> {
        return this.run<ScopeInClause_2>($$dpth,
            () => {
                let $scope$scope: Nullable<Scope1>;
                let $$res: Nullable<ScopeInClause_2> = null;
                if (true
                    && ($scope$scope = this.matchScope1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInClause_2, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScope1Sub($$dpth: number, $$cr?: ErrorTracker): Nullable<Scope1Sub> {
        return this.run<Scope1Sub>($$dpth,
            () => {
                let $scope$alter: Nullable<Alternative>;
                let $$res: Nullable<Scope1Sub> = null;
                if (true
                    && ($scope$alter = this.matchAlternative($$dpth + 1, $$cr)) !== null
                    && this.loop<SepEx>(() => this.matchSepEx($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.loop<SepEx>(() => this.matchSepEx($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.Scope1Sub, alter: $scope$alter};
                }
                return $$res;
            });
    }
    public matchScope1($$dpth: number, $$cr?: ErrorTracker): Nullable<Scope1> {
        return this.run<Scope1>($$dpth,
            () => {
                let $scope$scope: Nullable<Scope2>;
                let $$res: Nullable<Scope1> = null;
                if (true
                    && ((this.matchScope1Sub($$dpth + 1, $$cr)) || true)
                    && ($scope$scope = this.matchScope2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Scope1, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScope2($$dpth: number, $$cr?: ErrorTracker): Nullable<Scope2> {
        return this.run<Scope2>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeInner[]>;
                let $$res: Nullable<Scope2> = null;
                if (true
                    && this.matchScopeBegin($$dpth + 1, $$cr) !== null
                    && ($scope$scope = this.loop<ScopeInner>(() => this.matchScopeInner($$dpth + 1, $$cr), true)) !== null
                    && this.matchScopeEnd($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Scope2, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub> {
        return this.choice<ScopeInnerSub>([
            () => this.matchScopeInnerSub_1($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_2($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_3($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_4($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_5($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_6($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_7($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_8($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_9($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_10($$dpth + 1, $$cr),
            () => this.matchScopeInnerSub_11($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeInnerSub_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_1> {
        return this.run<ScopeInnerSub_1>($$dpth,
            () => {
                let $scope$parallel: Nullable<ScopeParallel>;
                let $$res: Nullable<ScopeInnerSub_1> = null;
                if (true
                    && ($scope$parallel = this.matchScopeParallel($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_1, parallel: $scope$parallel};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_2> {
        return this.run<ScopeInnerSub_2>($$dpth,
            () => {
                let $scope$scope: Nullable<Scope1>;
                let $$res: Nullable<ScopeInnerSub_2> = null;
                if (true
                    && ($scope$scope = this.matchScope1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_2, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_3> {
        return this.run<ScopeInnerSub_3>($$dpth,
            () => {
                let $scope$scope_if: Nullable<ScopeIf>;
                let $$res: Nullable<ScopeInnerSub_3> = null;
                if (true
                    && ($scope$scope_if = this.matchScopeIf($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_3, scope_if: $scope$scope_if};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_4> {
        return this.run<ScopeInnerSub_4>($$dpth,
            () => {
                let $scope$scope_while: Nullable<ScopeWhile>;
                let $$res: Nullable<ScopeInnerSub_4> = null;
                if (true
                    && ($scope$scope_while = this.matchScopeWhile($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_4, scope_while: $scope$scope_while};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_5> {
        return this.run<ScopeInnerSub_5>($$dpth,
            () => {
                let $scope$scope_for: Nullable<ScopeFor>;
                let $$res: Nullable<ScopeInnerSub_5> = null;
                if (true
                    && ($scope$scope_for = this.matchScopeFor($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_5, scope_for: $scope$scope_for};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_6($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_6> {
        return this.run<ScopeInnerSub_6>($$dpth,
            () => {
                let $scope$scope_foreach: Nullable<ScopeForeach>;
                let $$res: Nullable<ScopeInnerSub_6> = null;
                if (true
                    && ($scope$scope_foreach = this.matchScopeForeach($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_6, scope_foreach: $scope$scope_foreach};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_7($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_7> {
        return this.run<ScopeInnerSub_7>($$dpth,
            () => {
                let $scope$scope_case: Nullable<ScopeCase>;
                let $$res: Nullable<ScopeInnerSub_7> = null;
                if (true
                    && ($scope$scope_case = this.matchScopeCase($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_7, scope_case: $scope$scope_case};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_8($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_8> {
        return this.run<ScopeInnerSub_8>($$dpth,
            () => {
                let $scope$scope_switch: Nullable<ScopeSwitch>;
                let $$res: Nullable<ScopeInnerSub_8> = null;
                if (true
                    && ($scope$scope_switch = this.matchScopeSwitch($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_8, scope_switch: $scope$scope_switch};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_9($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_9> {
        return this.run<ScopeInnerSub_9>($$dpth,
            () => {
                let $scope$alter: Nullable<AlternativeSep>;
                let $$res: Nullable<ScopeInnerSub_9> = null;
                if (true
                    && ($scope$alter = this.matchAlternativeSep($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_9, alter: $scope$alter};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_10($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_10> {
        return this.run<ScopeInnerSub_10>($$dpth,
            () => {
                let $scope$exp: Nullable<Expression>;
                let $$res: Nullable<ScopeInnerSub_10> = null;
                if (true
                    && ($scope$exp = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_10, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchScopeInnerSub_11($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInnerSub_11> {
        return this.run<ScopeInnerSub_11>($$dpth,
            () => {
                let $scope$empty: Nullable<Empty>;
                let $$res: Nullable<ScopeInnerSub_11> = null;
                if (true
                    && ($scope$empty = this.matchEmpty($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInnerSub_11, empty: $scope$empty};
                }
                return $$res;
            });
    }
    public matchScopeInner($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInner> {
        return this.run<ScopeInner>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeInnerSub>;
                let $$res: Nullable<ScopeInner> = null;
                if (true
                    && this.loop<ScopeInner_$0>(() => this.matchScopeInner_$0($$dpth + 1, $$cr), true) !== null
                    && ($scope$scope = this.matchScopeInnerSub($$dpth + 1, $$cr)) !== null
                    && this.loop<ScopeInner_$1>(() => this.matchScopeInner_$1($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeInner, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeInner_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInner_$0> {
        return this.choice<ScopeInner_$0>([
            () => this.matchScopeInner_$0_1($$dpth + 1, $$cr),
            () => this.matchScopeInner_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeInner_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInner_$0_1> {
        return this.matchSepEx($$dpth + 1, $$cr);
    }
    public matchScopeInner_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInner_$0_2> {
        return this.matchSep2($$dpth + 1, $$cr);
    }
    public matchScopeInner_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInner_$1> {
        return this.choice<ScopeInner_$1>([
            () => this.matchScopeInner_$1_1($$dpth + 1, $$cr),
            () => this.matchScopeInner_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeInner_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInner_$1_1> {
        return this.matchSepEx($$dpth + 1, $$cr);
    }
    public matchScopeInner_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeInner_$1_2> {
        return this.matchSep2($$dpth + 1, $$cr);
    }
    public matchScopeParallel($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeParallel> {
        return this.run<ScopeParallel>($$dpth,
            () => {
                let $scope$exp: Nullable<Expression>;
                let $$res: Nullable<ScopeParallel> = null;
                if (true
                    && this.matchScopeParallel_$0($$dpth + 1, $$cr) !== null
                    && this.loop<SepEx>(() => this.matchSepEx($$dpth + 1, $$cr), false) !== null
                    && ($scope$exp = this.matchExpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeParallel, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchScopeParallel_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeParallel_$0> {
        return this.choice<ScopeParallel_$0>([
            () => this.matchScopeParallel_$0_1($$dpth + 1, $$cr),
            () => this.matchScopeParallel_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeParallel_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeParallel_$0_1> {
        return this.regexAccept(String.raw`(?:parallel)`, $$dpth + 1, $$cr);
    }
    public matchScopeParallel_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeParallel_$0_2> {
        return this.regexAccept(String.raw`(?:void)`, $$dpth + 1, $$cr);
    }
    public matchScopeIfSubElseIf($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfSubElseIf> {
        return this.run<ScopeIfSubElseIf>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeIfElseIf>;
                let $$res: Nullable<ScopeIfSubElseIf> = null;
                if (true
                    && this.loop<ScopeIfSubElseIf_$0>(() => this.matchScopeIfSubElseIf_$0($$dpth + 1, $$cr), true) !== null
                    && ($scope$scope = this.matchScopeIfElseIf($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeIfSubElseIf, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeIfSubElseIf_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfSubElseIf_$0> {
        return this.choice<ScopeIfSubElseIf_$0>([
            () => this.matchScopeIfSubElseIf_$0_1($$dpth + 1, $$cr),
            () => this.matchScopeIfSubElseIf_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeIfSubElseIf_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfSubElseIf_$0_1> {
        return this.matchSepEx($$dpth + 1, $$cr);
    }
    public matchScopeIfSubElseIf_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfSubElseIf_$0_2> {
        return this.matchSep2($$dpth + 1, $$cr);
    }
    public matchScopeIfSubElse($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfSubElse> {
        return this.run<ScopeIfSubElse>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeIfElse>;
                let $$res: Nullable<ScopeIfSubElse> = null;
                if (true
                    && this.loop<ScopeIfSubElse_$0>(() => this.matchScopeIfSubElse_$0($$dpth + 1, $$cr), true) !== null
                    && ($scope$scope = this.matchScopeIfElse($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeIfSubElse, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeIfSubElse_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfSubElse_$0> {
        return this.choice<ScopeIfSubElse_$0>([
            () => this.matchScopeIfSubElse_$0_1($$dpth + 1, $$cr),
            () => this.matchScopeIfSubElse_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeIfSubElse_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfSubElse_$0_1> {
        return this.matchSepEx($$dpth + 1, $$cr);
    }
    public matchScopeIfSubElse_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfSubElse_$0_2> {
        return this.matchSep2($$dpth + 1, $$cr);
    }
    public matchScopeIf($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIf> {
        return this.run<ScopeIf>($$dpth,
            () => {
                let $scope$scope_if: Nullable<ScopeIfIf>;
                let $scope$scope_elseif: Nullable<ScopeIfSubElseIf[]>;
                let $scope$scope_else: Nullable<Nullable<ScopeIfSubElse>>;
                let $$res: Nullable<ScopeIf> = null;
                if (true
                    && ($scope$scope_if = this.matchScopeIfIf($$dpth + 1, $$cr)) !== null
                    && ($scope$scope_elseif = this.loop<ScopeIfSubElseIf>(() => this.matchScopeIfSubElseIf($$dpth + 1, $$cr), true)) !== null
                    && (($scope$scope_else = this.matchScopeIfSubElse($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.ScopeIf, scope_if: $scope$scope_if, scope_elseif: $scope$scope_elseif, scope_else: $scope$scope_else};
                }
                return $$res;
            });
    }
    public matchScopeIfSubIf($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfSubIf> {
        return this.run<ScopeIfSubIf>($$dpth,
            () => {
                let $scope$condition: Nullable<Condition>;
                let $scope$scope: Nullable<ScopeInClause>;
                let $$res: Nullable<ScopeIfSubIf> = null;
                if (true
                    && this.regexAccept(String.raw`(?:if)`, $$dpth + 1, $$cr) !== null
                    && ($scope$condition = this.matchCondition($$dpth + 1, $$cr)) !== null
                    && ($scope$scope = this.matchScopeInClause($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeIfSubIf, condition: $scope$condition, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeIfIf($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfIf> {
        return this.run<ScopeIfIf>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeIfSubIf>;
                let $$res: Nullable<ScopeIfIf> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$scope = this.matchScopeIfSubIf($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeIfIf, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeIfElseIf($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfElseIf> {
        return this.run<ScopeIfElseIf>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeIfSubIf>;
                let $$res: Nullable<ScopeIfElseIf> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:else)`, $$dpth + 1, $$cr) !== null
                    && ($scope$scope = this.matchScopeIfSubIf($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeIfElseIf, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeIfElse($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeIfElse> {
        return this.run<ScopeIfElse>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeInClause>;
                let $$res: Nullable<ScopeIfElse> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:else)`, $$dpth + 1, $$cr) !== null
                    && ($scope$scope = this.matchScopeInClause($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeIfElse, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeWhile($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeWhile> {
        return this.run<ScopeWhile>($$dpth,
            () => {
                let $scope$condition: Nullable<Condition>;
                let $scope$scope: Nullable<ScopeInClause>;
                let $$res: Nullable<ScopeWhile> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:while)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$condition = this.matchCondition($$dpth + 1, $$cr)) !== null
                    && ($scope$scope = this.matchScopeInClause($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeWhile, condition: $scope$condition, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeForSub($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeForSub> {
        return this.choice<ScopeForSub>([
            () => this.matchScopeForSub_1($$dpth + 1, $$cr),
            () => this.matchScopeForSub_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeForSub_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeForSub_1> {
        return this.run<ScopeForSub_1>($$dpth,
            () => {
                let $scope$raw: Nullable<ForCondition>;
                let $$res: Nullable<ScopeForSub_1> = null;
                if (true
                    && ($scope$raw = this.matchForCondition($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeForSub_1, raw: $scope$raw};
                }
                return $$res;
            });
    }
    public matchScopeForSub_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeForSub_2> {
        return this.run<ScopeForSub_2>($$dpth,
            () => {
                let $scope$bracket: Nullable<ForCondition>;
                let $$res: Nullable<ScopeForSub_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$bracket = this.matchForCondition($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeForSub_2, bracket: $scope$bracket};
                }
                return $$res;
            });
    }
    public matchScopeFor($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeFor> {
        return this.run<ScopeFor>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeInClause>;
                let $$res: Nullable<ScopeFor> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:for)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.matchScopeForSub($$dpth + 1, $$cr) !== null
                    && ($scope$scope = this.matchScopeInClause($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeFor, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeForeachSub($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeForeachSub> {
        return this.choice<ScopeForeachSub>([
            () => this.matchScopeForeachSub_1($$dpth + 1, $$cr),
            () => this.matchScopeForeachSub_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeForeachSub_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeForeachSub_1> {
        return this.run<ScopeForeachSub_1>($$dpth,
            () => {
                let $scope$raw: Nullable<ForeachCondition>;
                let $$res: Nullable<ScopeForeachSub_1> = null;
                if (true
                    && ($scope$raw = this.matchForeachCondition($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeForeachSub_1, raw: $scope$raw};
                }
                return $$res;
            });
    }
    public matchScopeForeachSub_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeForeachSub_2> {
        return this.run<ScopeForeachSub_2>($$dpth,
            () => {
                let $scope$bracket: Nullable<ForeachCondition>;
                let $$res: Nullable<ScopeForeachSub_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$bracket = this.matchForeachCondition($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeForeachSub_2, bracket: $scope$bracket};
                }
                return $$res;
            });
    }
    public matchScopeForeach($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeForeach> {
        return this.run<ScopeForeach>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeInClause>;
                let $$res: Nullable<ScopeForeach> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:foreach)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.matchScopeForeachSub($$dpth + 1, $$cr) !== null
                    && ($scope$scope = this.matchScopeInClause($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeForeach, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeCase($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeCase> {
        return this.run<ScopeCase>($$dpth,
            () => {
                let $scope$case: Nullable<ScopeCaseCase>;
                let $$res: Nullable<ScopeCase> = null;
                if (true
                    && ($scope$case = this.matchScopeCaseCase($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeCase, case: $scope$case};
                }
                return $$res;
            });
    }
    public matchScopeCaseCase($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeCaseCase> {
        return this.run<ScopeCaseCase>($$dpth,
            () => {
                let $scope$condition: Nullable<Condition>;
                let $scope$when: Nullable<ScopeCaseWhen[]>;
                let $scope$others: Nullable<Nullable<ScopeCaseOthers>>;
                let $$res: Nullable<ScopeCaseCase> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:case)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$condition = this.matchCondition($$dpth + 1, $$cr)) !== null
                    && this.loop<SepEx>(() => this.matchSepEx($$dpth + 1, $$cr), true) !== null
                    && this.matchScopeBegin($$dpth + 1, $$cr) !== null
                    && ($scope$when = this.loop<ScopeCaseWhen>(() => this.matchScopeCaseWhen($$dpth + 1, $$cr), true)) !== null
                    && (($scope$others = this.matchScopeCaseOthers($$dpth + 1, $$cr)) || true)
                    && this.loop<SepEx>(() => this.matchSepEx($$dpth + 1, $$cr), true) !== null
                    && this.matchScopeEnd($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeCaseCase, condition: $scope$condition, when: $scope$when, others: $scope$others};
                }
                return $$res;
            });
    }
    public matchScopeCaseWhenSub($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeCaseWhenSub> {
        return this.choice<ScopeCaseWhenSub>([
            () => this.matchScopeCaseWhenSub_1($$dpth + 1, $$cr),
            () => this.matchScopeCaseWhenSub_2($$dpth + 1, $$cr),
        ]);
    }
    public matchScopeCaseWhenSub_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeCaseWhenSub_1> {
        return this.run<ScopeCaseWhenSub_1>($$dpth,
            () => {
                let $scope$raw: Nullable<WhenCondition>;
                let $$res: Nullable<ScopeCaseWhenSub_1> = null;
                if (true
                    && ($scope$raw = this.matchWhenCondition($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeCaseWhenSub_1, raw: $scope$raw};
                }
                return $$res;
            });
    }
    public matchScopeCaseWhenSub_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeCaseWhenSub_2> {
        return this.run<ScopeCaseWhenSub_2>($$dpth,
            () => {
                let $scope$bracket: Nullable<WhenCondition>;
                let $$res: Nullable<ScopeCaseWhenSub_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$bracket = this.matchWhenCondition($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeCaseWhenSub_2, bracket: $scope$bracket};
                }
                return $$res;
            });
    }
    public matchScopeCaseWhen($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeCaseWhen> {
        return this.run<ScopeCaseWhen>($$dpth,
            () => {
                let $scope$condition: Nullable<ScopeCaseWhenSub>;
                let $scope$scope: Nullable<ScopeInClause>;
                let $$res: Nullable<ScopeCaseWhen> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:when)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$condition = this.matchScopeCaseWhenSub($$dpth + 1, $$cr)) !== null
                    && ($scope$scope = this.matchScopeInClause($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeCaseWhen, condition: $scope$condition, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeCaseOthers($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeCaseOthers> {
        return this.run<ScopeCaseOthers>($$dpth,
            () => {
                let $scope$scope: Nullable<ScopeInClause>;
                let $$res: Nullable<ScopeCaseOthers> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:others)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$scope = this.matchScopeInClause($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeCaseOthers, scope: $scope$scope};
                }
                return $$res;
            });
    }
    public matchScopeSwitch($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeSwitch> {
        return this.run<ScopeSwitch>($$dpth,
            () => {
                let $scope$condition: Nullable<Condition>;
                let $$res: Nullable<ScopeSwitch> = null;
                if (true
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:switch)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Space>(() => this.matchSpace($$dpth + 1, $$cr), true) !== null
                    && ($scope$condition = this.matchCondition($$dpth + 1, $$cr)) !== null
                    && this.matchScopeInClause($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ScopeSwitch, condition: $scope$condition};
                }
                return $$res;
            });
    }
    public matchScope($$dpth: number, $$cr?: ErrorTracker): Nullable<Scope> {
        return this.matchScope1($$dpth + 1, $$cr);
    }
    public matchScopeOuter($$dpth: number, $$cr?: ErrorTracker): Nullable<ScopeOuter> {
        return this.matchScope2($$dpth + 1, $$cr);
    }
    public matchFunctionName($$dpth: number, $$cr?: ErrorTracker): Nullable<FunctionName> {
        return this.run<FunctionName>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$name: Nullable<Name>;
                let $$res: Nullable<FunctionName> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && ($scope$name = this.matchName($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FunctionName, pos: $scope$pos, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchFunctionAlternative($$dpth: number, $$cr?: ErrorTracker): Nullable<FunctionAlternative> {
        return this.run<FunctionAlternative>($$dpth,
            () => {
                let $scope$alter: Nullable<Alternative>;
                let $$res: Nullable<FunctionAlternative> = null;
                if (true
                    && this.loop<SepEx>(() => this.matchSepEx($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.loop<SepEx>(() => this.matchSepEx($$dpth + 1, $$cr), true) !== null
                    && ($scope$alter = this.matchAlternative($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FunctionAlternative, alter: $scope$alter};
                }
                return $$res;
            });
    }
    public matchFunction($$dpth: number, $$cr?: ErrorTracker): Nullable<Function> {
        return this.run<Function>($$dpth,
            () => {
                let $scope$name: Nullable<FunctionName>;
                let $scope$alter: Nullable<Nullable<FunctionAlternative>>;
                let $scope$body: Nullable<ScopeOuter>;
                let $$res: Nullable<Function> = null;
                if (true
                    && ($scope$name = this.matchFunctionName($$dpth + 1, $$cr)) !== null
                    && (($scope$alter = this.matchFunctionAlternative($$dpth + 1, $$cr)) || true)
                    && this.loop<SepEx>(() => this.matchSepEx($$dpth + 1, $$cr), true) !== null
                    && ($scope$body = this.matchScopeOuter($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Function, name: $scope$name, alter: $scope$alter, body: $scope$body};
                }
                return $$res;
            });
    }
    public matchGrammarSub($$dpth: number, $$cr?: ErrorTracker): Nullable<GrammarSub> {
        return this.choice<GrammarSub>([
            () => this.matchGrammarSub_1($$dpth + 1, $$cr),
            () => this.matchGrammarSub_2($$dpth + 1, $$cr),
        ]);
    }
    public matchGrammarSub_1($$dpth: number, $$cr?: ErrorTracker): Nullable<GrammarSub_1> {
        return this.run<GrammarSub_1>($$dpth,
            () => {
                let $scope$func: Nullable<Function>;
                let $$res: Nullable<GrammarSub_1> = null;
                if (true
                    && ($scope$func = this.matchFunction($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.GrammarSub_1, func: $scope$func};
                }
                return $$res;
            });
    }
    public matchGrammarSub_2($$dpth: number, $$cr?: ErrorTracker): Nullable<GrammarSub_2> {
        return this.run<GrammarSub_2>($$dpth,
            () => {
                let $scope$empty: Nullable<Empty>;
                let $$res: Nullable<GrammarSub_2> = null;
                if (true
                    && ($scope$empty = this.matchEmpty($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.GrammarSub_2, empty: $scope$empty};
                }
                return $$res;
            });
    }
    public matchGrammar($$dpth: number, $$cr?: ErrorTracker): Nullable<Grammar> {
        return this.run<Grammar>($$dpth,
            () => {
                let $scope$sub: Nullable<GrammarSub[]>;
                let $$res: Nullable<Grammar> = null;
                if (true
                    && ($scope$sub = this.loop<GrammarSub>(() => this.matchGrammarSub($$dpth + 1, $$cr), true)) !== null
                    && this.matchEOF($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Grammar, sub: $scope$sub};
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}